//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace MyNamespace
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MortgageApplication 
    {
        [Newtonsoft.Json.JsonProperty("applicantGroup", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<ApplicantGroup> ApplicantGroup { get; set; } = new System.Collections.ObjectModel.Collection<ApplicantGroup>();
    
        /// <summary>Details about this application.</summary>
        [Newtonsoft.Json.JsonProperty("deal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DealType Deal { get; set; } = new DealType();
    
        [Newtonsoft.Json.JsonProperty("mortgage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<MortgageType> Mortgage { get; set; } = new System.Collections.ObjectModel.Collection<MortgageType>();
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DealNotesType> Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subjectProperty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PropertyType SubjectProperty { get; set; } = new PropertyType();
    
    
    }
    
    /// <summary>Full street address components</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Address1Type 
    {
        /// <summary>Concatentation of street address</summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AddressLine1 { get; set; }
    
        /// <summary>Address Line continued</summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AddressLine2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string City { get; set; }
    
        /// <summary>Menu Code: COUNTRYTYPE</summary>
        [Newtonsoft.Json.JsonProperty("countryTypeDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address1TypeCountryTypeDd CountryTypeDd { get; set; }
    
        /// <summary>Including US Zip Code</summary>
        [Newtonsoft.Json.JsonProperty("internationalPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InternationalPostalCode { get; set; }
    
        /// <summary>FSA - The First Segment of the Postal Code.</summary>
        [Newtonsoft.Json.JsonProperty("postalFsa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]$")]
        public string PostalFsa { get; set; }
    
        /// <summary>LDU - The Second Segment of the Postal Code.</summary>
        [Newtonsoft.Json.JsonProperty("postalLdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?!.*[DFIOQU]) ?[0-9][A-Z][0-9]$")]
        public string PostalLdu { get; set; }
    
        /// <summary>Provinces and States
        /// Menu Code: PROVINCESTATE</summary>
        [Newtonsoft.Json.JsonProperty("provinceDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address1TypeProvinceDd ProvinceDd { get; set; }
    
        /// <summary>Street direction of address
        /// Menu Code: STREETDIRECTION</summary>
        [Newtonsoft.Json.JsonProperty("streetDirectionDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address1TypeStreetDirectionDd StreetDirectionDd { get; set; }
    
        /// <summary>Identifies the name of the street.</summary>
        [Newtonsoft.Json.JsonProperty("streetName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string StreetName { get; set; }
    
        /// <summary>Identifies the number on the </summary>
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string StreetNumber { get; set; }
    
        /// <summary>Identifies the type of street. Eg: Avenue, Street, Road, Terrace, etc.
        /// Menu Code: STREETTYPE</summary>
        [Newtonsoft.Json.JsonProperty("streetTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address1TypeStreetTypeDd StreetTypeDd { get; set; }
    
        /// <summary>Identifies unit number or alpha identification of unit in complex. Eg.: Unit A, Unit 201, etc.</summary>
        [Newtonsoft.Json.JsonProperty("unitNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string UnitNumber { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ApplicantAddressType 
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address1Type Address { get; set; }
    
        /// <summary>Describe address type.
        /// Menu Code: BORROWERADDRESSTYPE</summary>
        [Newtonsoft.Json.JsonProperty("addressTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantAddressTypeAddressTypeDd AddressTypeDd { get; set; }
    
        /// <summary>Number of months at this address.</summary>
        [Newtonsoft.Json.JsonProperty("monthsAtAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 9999D)]
        public double MonthsAtAddress { get; set; }
    
        /// <summary>if residential status is rent, the amount of rent payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rentPaymentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double RentPaymentAmount { get; set; }
    
        /// <summary>Applicant's status at this address. (Own/Rent etc)
        /// Menu Code: RESIDENTIALSTATUS</summary>
        [Newtonsoft.Json.JsonProperty("residentialStatusDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantAddressTypeResidentialStatusDd ResidentialStatusDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ApplicantType 
    {
        [Newtonsoft.Json.JsonProperty("addressDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicantAddressType> AddressDetail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssetType> Asset { get; set; }
    
        /// <summary>Date of birth of applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$")]
        public string BirthDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerCellNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string BorrowerCellNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerFaxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string BorrowerFaxNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerHomePhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string BorrowerHomePhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double BorrowerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerSpouseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000000000000D)]
        public double BorrowerSpouseId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerWorkPhoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string BorrowerWorkPhoneExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerWorkPhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string BorrowerWorkPhoneNumber { get; set; }
    
        /// <summary>Institution-defined reference number, typically from a corporate Central Information system or other client system of record indicating the number assigned to the client relationship.</summary>
        [Newtonsoft.Json.JsonProperty("clientReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ClientReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentAddressSameAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypeCurrentAddressSameAs CurrentAddressSameAs { get; set; }
    
        /// <summary>Email address to contact applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(.+)@(.+)$")]
        public string EmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("employmentHistory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmploymentHistoryType> EmploymentHistory { get; set; }
    
        /// <summary>Indicates whether applicant is a existing client.
        /// Y=Yes, N=No</summary>
        [Newtonsoft.Json.JsonProperty("existingClient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypeExistingClient ExistingClient { get; set; }
    
        /// <summary>Indicates whether applicant is a first time buyer.
        /// Y=Yes, N=No
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstTimeBuyer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypeFirstTimeBuyer FirstTimeBuyer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Identification> Identification { get; set; }
    
        /// <summary>Language preference of applicant.
        /// Menu Code: LANGUAGEPREFERENCE</summary>
        [Newtonsoft.Json.JsonProperty("languagePreferenceDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypeLanguagePreferenceDd LanguagePreferenceDd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("liability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LiabilityType> Liability { get; set; }
    
        /// <summary>Menu Code: MARITALSTATUS
        ///  </summary>
        [Newtonsoft.Json.JsonProperty("maritalStatusDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypeMaritalStatusDd MaritalStatusDd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Name Name { get; set; } = new Name();
    
        /// <summary>Number of dependents of applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfDependents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99D)]
        public double NumberOfDependents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherIncomeType> OtherIncome { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherProperty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherProperty> OtherProperty { get; set; }
    
        /// <summary>Preferred  method of contacting applicant.
        /// Menu Code: PREFCONTACTMETHOD
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredContactMethodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypePreferredContactMethodDd PreferredContactMethodDd { get; set; }
    
        /// <summary>Y=Yes, N=No</summary>
        [Newtonsoft.Json.JsonProperty("primaryApplicantFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypePrimaryApplicantFlag PrimaryApplicantFlag { get; set; }
    
        /// <summary>Menu Code: RELATIONSHIP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipToPrimaryApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantTypeRelationshipToPrimaryApplicant RelationshipToPrimaryApplicant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("socialInsuranceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string SocialInsuranceNumber { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AssetType 
    {
        /// <summary>Description of asset entered by user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string AssetDescription { get; set; }
    
        /// <summary>Categorization of the asset.
        /// Menu Code: ASSETTYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssetTypeDd AssetTypeDd { get; set; }
    
        /// <summary>Value of asset entered by user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double AssetValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("downpaymentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double DownpaymentAmount { get; set; }
    
    
    }
    
    /// <summary>Contact Node</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ContactType 
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address1Type Address { get; set; } = new Address1Type();
    
        [Newtonsoft.Json.JsonProperty("contactCellPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string ContactCellPhone { get; set; }
    
        /// <summary>Current email address for contact entry.</summary>
        [Newtonsoft.Json.JsonProperty("contactEmailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ContactEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactFaxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string ContactFaxNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactName ContactName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(14)]
        public string ContactPhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhoneNumberExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContactPhoneNumberExtension { get; set; }
    
        /// <summary>Language perference of contact.
        /// Menu Code: LANGUAGEPREFERENCE</summary>
        [Newtonsoft.Json.JsonProperty("languagePreferenceDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContactTypeLanguagePreferenceDd LanguagePreferenceDd { get; set; }
    
        /// <summary>Preferred method of contact.
        /// Menu Code: PREFCONTACTMETHOD</summary>
        [Newtonsoft.Json.JsonProperty("preferredContactMethodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContactTypePreferredContactMethodDd PreferredContactMethodDd { get; set; }
    
    
    }
    
    /// <summary>Deal Notes</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DealNotesType 
    {
        /// <summary>Category of note.
        /// Menu Code: DEALNOTESCATEGORY</summary>
        [Newtonsoft.Json.JsonProperty("categoryDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DealNotesTypeCategoryDd CategoryDd { get; set; }
    
        /// <summary>Date/Time note was added.</summary>
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EntryDate { get; set; }
    
        /// <summary>Free form text as entered by user or created by the system.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000000)]
        public string Text { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DealType 
    {
        /// <summary>Purpose of application.
        /// Menu Code: DEALPURPOSE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dealPurposeDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DealTypeDealPurposeDd DealPurposeDd { get; set; }
    
        /// <summary>Identifies type of application. (Approval or Pre-approval)
        /// Menu Code: APPLICATIONTYPE</summary>
        [Newtonsoft.Json.JsonProperty("dealTypeDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DealTypeDd DealTypeDd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("downPaymentSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DownPaymentSource> DownPaymentSource { get; set; }
    
        /// <summary>The business date anticipated for Closing and Funding.</summary>
        [Newtonsoft.Json.JsonProperty("estimatedClosingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EstimatedClosingDate { get; set; }
    
        /// <summary>The date the applicant requires financing as supplied by a realtor.</summary>
        [Newtonsoft.Json.JsonProperty("financingWaiverDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset FinancingWaiverDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referralReferenceNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferralReferenceNo { get; set; }
    
        /// <summary>Amount for property improvement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refiImprovementAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double RefiImprovementAmount { get; set; }
    
        /// <summary>Description of property improvements being made.</summary>
        [Newtonsoft.Json.JsonProperty("refiImprovementsDesc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string RefiImprovementsDesc { get; set; }
    
        /// <summary>Indicates if improvements being done excluding purchase.
        /// Y=Yes, N= No</summary>
        [Newtonsoft.Json.JsonProperty("refiImprovementsFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DealTypeRefiImprovementsFlag RefiImprovementsFlag { get; set; }
    
        /// <summary>Purpose for Refinancing</summary>
        [Newtonsoft.Json.JsonProperty("refiPurpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string RefiPurpose { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceApplicationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string SourceApplicationId { get; set; }
    
        /// <summary>Identifies the entity that will be paying the property taxes.
        /// Menu Code: TAXPAYOR</summary>
        [Newtonsoft.Json.JsonProperty("taxPayorDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DealTypeTaxPayorDd TaxPayorDd { get; set; }
    
        /// <summary>Third Party is defined as an application that is initiated on behalf of another person other than the applicant(s).
        /// Y=Yes, N= No</summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyApplicationFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DealTypeThirdPartyApplicationFlag ThirdPartyApplicationFlag { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EmploymentHistoryType 
    {
        /// <summary>User entered description of the type of company that the applicant owes.</summary>
        [Newtonsoft.Json.JsonProperty("companyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CompanyType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContactType Contact { get; set; } = new ContactType();
    
        [Newtonsoft.Json.JsonProperty("employerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string EmployerName { get; set; }
    
        /// <summary>Indicates current or previous employment.
        /// Menu Code: EMPLOYMENTHISTORYSTATUS</summary>
        [Newtonsoft.Json.JsonProperty("employmentHistoryStatusDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmploymentHistoryTypeEmploymentHistoryStatusDd EmploymentHistoryStatusDd { get; set; }
    
        /// <summary>Indicates type of employment, IE. full or part time, seasonal etc.
        /// Menu Code: EMPLOYMENTHISTORYTYPE</summary>
        [Newtonsoft.Json.JsonProperty("employmentHistoryTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmploymentHistoryTypeDd EmploymentHistoryTypeDd { get; set; }
    
        /// <summary>Gross revenue reported of the company owned by the applicant and employing the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossRevenue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double GrossRevenue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("income", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public EmploymentIncomeType Income { get; set; } = new EmploymentIncomeType();
    
        /// <summary>Distinct subset of industry this applicant is employed in.
        /// Menu Code: INDUSTRYSECTOR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industrySectorDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmploymentHistoryTypeIndustrySectorDd IndustrySectorDd { get; set; }
    
        /// <summary>Job title of applicant entered by user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string JobTitle { get; set; }
    
        /// <summary>Length of service at this employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monthsOfService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999D)]
        public double MonthsOfService { get; set; }
    
        /// <summary>Occupation of applicant at this employer.
        /// Menu Code: OCCUPATION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmploymentHistoryTypeOccupationDd OccupationDd { get; set; }
    
        /// <summary>Operating name of the company owned and employing the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operatingAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OperatingAs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("selfEmploymentFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string SelfEmploymentFlag { get; set; }
    
        /// <summary>The number of months an applicant has been employed in a particular industry. (months)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeInIndustry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 999D)]
        public double TimeInIndustry { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EmploymentIncomeType 
    {
        /// <summary>Amount of income applicant received.
        /// Employment History</summary>
        [Newtonsoft.Json.JsonProperty("incomeAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double IncomeAmount { get; set; }
    
        /// <summary>Free form text entered by user to indicated the source of the income.</summary>
        [Newtonsoft.Json.JsonProperty("incomeDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IncomeDescription { get; set; }
    
        /// <summary>Indicates frequency income received.
        /// Menu Code: INCOMEPERIOD
        /// Employment History </summary>
        [Newtonsoft.Json.JsonProperty("incomePeriodDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmploymentIncomeTypeIncomePeriodDd IncomePeriodDd { get; set; }
    
        /// <summary>Indicates the type of income .
        /// Menu Code: INCOMETYPE
        /// Employment History </summary>
        [Newtonsoft.Json.JsonProperty("incomeTypeDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmploymentIncomeTypeIncomeTypeDd IncomeTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OtherIncomeType 
    {
        /// <summary>Amount of income applicant received.
        /// Employment History</summary>
        [Newtonsoft.Json.JsonProperty("incomeAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double IncomeAmount { get; set; }
    
        /// <summary>Free form text entered by user to indicated the source of the income.</summary>
        [Newtonsoft.Json.JsonProperty("incomeDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IncomeDescription { get; set; }
    
        /// <summary>Indicates frequency income received.
        /// Menu Code: INCOMEPERIOD
        /// Employment History </summary>
        [Newtonsoft.Json.JsonProperty("incomePeriodDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherIncomeTypeIncomePeriodDd IncomePeriodDd { get; set; }
    
        /// <summary>Indicates the type of income .
        /// Menu Code: INCOMETYPE
        /// Employment History </summary>
        [Newtonsoft.Json.JsonProperty("incomeTypeDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherIncomeTypeIncomeTypeDd IncomeTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RentalIncomeType 
    {
        /// <summary>The percentage of the income of this entry to be included in the TDS calculation for this applicant. </summary>
        [Newtonsoft.Json.JsonProperty("incPercentInTds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double IncPercentInTds { get; set; }
    
        /// <summary>Amount of income applicant received.
        /// Employment History</summary>
        [Newtonsoft.Json.JsonProperty("incomeAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double IncomeAmount { get; set; }
    
        /// <summary>Free form text entered by user to indicated the source of the income.</summary>
        [Newtonsoft.Json.JsonProperty("incomeDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IncomeDescription { get; set; }
    
        /// <summary>Indicates frequency income received.
        /// Menu Code: INCOMEPERIOD
        /// Employment History </summary>
        [Newtonsoft.Json.JsonProperty("incomePeriodDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RentalIncomeTypeIncomePeriodDd IncomePeriodDd { get; set; }
    
        /// <summary>Indicates the type of income .
        /// Menu Code: INCOMETYPE
        /// Employment History </summary>
        [Newtonsoft.Json.JsonProperty("incomeTypeDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RentalIncomeTypeIncomeTypeDd IncomeTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiabilityType 
    {
        /// <summary>Set to ‘Y’ if this liability was extracted from a credit bureau report, if not then ‘N’.</summary>
        [Newtonsoft.Json.JsonProperty("cbScraped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string CbScraped { get; set; }
    
        /// <summary>Credit limit for a credit card or Line of Credit.
        /// Broker </summary>
        [Newtonsoft.Json.JsonProperty("creditLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double CreditLimit { get; set; }
    
        /// <summary>Outstanding amount/balance remaining.
        /// Broker </summary>
        [Newtonsoft.Json.JsonProperty("liabilityAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double LiabilityAmount { get; set; }
    
        /// <summary>Free form description, entered by user, that describes the institution or company that owns the liability.
        /// Broker</summary>
        [Newtonsoft.Json.JsonProperty("liabilityDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string LiabilityDescription { get; set; }
    
        /// <summary>The amount of the monthly payment.
        /// Broker</summary>
        [Newtonsoft.Json.JsonProperty("liabilityMonthlyPayment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double LiabilityMonthlyPayment { get; set; }
    
        /// <summary>Indicates how the liability will be eliminated before closing.
        /// Menu Code: LIABILITYPAYOFFTYPE</summary>
        [Newtonsoft.Json.JsonProperty("liabilityPayOffTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiabilityTypeLiabilityPayOffTypeDd LiabilityPayOffTypeDd { get; set; }
    
        /// <summary>Describes the type of liability.
        /// Menu Code: LIABILITYTYPE
        /// Broker</summary>
        [Newtonsoft.Json.JsonProperty("liabilityTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiabilityTypeDd LiabilityTypeDd { get; set; }
    
        /// <summary>Maturity date, if applicable, of the liability.</summary>
        [Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset MaturityDate { get; set; }
    
        /// <summary>Y/N</summary>
        [Newtonsoft.Json.JsonProperty("monthlyPaymentOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string MonthlyPaymentOverride { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MortgageExistingType 
    {
        /// <summary>The period of time over which the interest rate, payment and other mortgage conditions are set. At the end of the term the mortgage is due and payable unless renewed. (Months)
        /// Requested</summary>
        [Newtonsoft.Json.JsonProperty("actualPaymentTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
        public double ActualPaymentTerm { get; set; }
    
        /// <summary>New Morgtage: - Balance of the mortgage remaining at the end of the mortgage term, based on calculated amortization schedule
        /// Existing Mortages: - Current outstanding balance
        /// Requested </summary>
        [Newtonsoft.Json.JsonProperty("balanceRemaining", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 10000000000000D)]
        public double BalanceRemaining { get; set; }
    
        /// <summary>Lender’s account number of existing mortgage if refinance deal.</summary>
        [Newtonsoft.Json.JsonProperty("currentMortgageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string CurrentMortgageNumber { get; set; }
    
        /// <summary>Y=Yes, N=No</summary>
        [Newtonsoft.Json.JsonProperty("existingMortgageFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeExistingMortgageFlag ExistingMortgageFlag { get; set; }
    
        /// <summary>Name of existing mortgage holder.
        /// Other </summary>
        [Newtonsoft.Json.JsonProperty("existingMortgageHolder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ExistingMortgageHolder { get; set; }
    
        /// <summary>Flag indicating that mortgage default insurance is required.
        /// Y=Yes, N=No
        /// Requested</summary>
        [Newtonsoft.Json.JsonProperty("insuredFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeInsuredFlag InsuredFlag { get; set; }
    
        /// <summary>Y = Interest Only
        /// N = Principal And Interest</summary>
        [Newtonsoft.Json.JsonProperty("interestOnlyFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeInterestOnlyFlag InterestOnlyFlag { get; set; }
    
        /// <summary>Indicates the type of interest used on this mortgage, ie. fixed, adjustable, variable.
        /// Menu Code: INTERESTTYPE
        /// Requested </summary>
        [Newtonsoft.Json.JsonProperty("interestTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeInterestTypeDd InterestTypeDd { get; set; }
    
        /// <summary>Indicates the type of loan, ie, Mortgage,LOC,MCM.
        /// Menu Code: LOANTYPE</summary>
        [Newtonsoft.Json.JsonProperty("loanTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeLoanTypeDd LoanTypeDd { get; set; }
    
        /// <summary>The MI policy number (Certificate) assigned by the Mortgage Insurer for this mortgage. Exiting Mortgages only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("miReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string MiReferenceNumber { get; set; }
    
        /// <summary>Mortgage Insurance Provider ,(existing mortgages only).
        /// Menu Code: MORTGAGEINSURER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mortgageInsurerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeMortgageInsurerId MortgageInsurerId { get; set; }
    
        /// <summary>Indicates lien position/charge type.
        /// Menu Code: MORTGAGETYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mortgageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeMortgageTypeDd MortgageTypeDd { get; set; }
    
        /// <summary>Yes/No flag indicating if the MI Premium is to be financed (capitalized) or paid upfront at closing. 
        /// Y=Yes, N=No
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mtgInsIncludeFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeMtgInsIncludeFlag MtgInsIncludeFlag { get; set; }
    
        /// <summary>Requested loan amount or base loan amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netLoanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double NetLoanAmount { get; set; }
    
        /// <summary>Original mortgage amount if the mortgage is refinance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalMortgageAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double OriginalMortgageAmount { get; set; }
    
        /// <summary>Indicates frequency when payments are to be made.
        /// Menu Code: PAYMENTFREQUENCY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentFrequencyDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypePaymentFrequencyDd PaymentFrequencyDd { get; set; }
    
        /// <summary>Describes the type of term of the morgage, ie. closed/open.
        /// Menu Code: TERMTYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTermDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypePaymentTermDd PaymentTermDd { get; set; }
    
        /// <summary>If morgtage is to be paid off, indicates when and how.
        /// Menu Code: MORTGAGEPAYOFFTYPE</summary>
        [Newtonsoft.Json.JsonProperty("payoffTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypePayoffTypeDd PayoffTypeDd { get; set; }
    
        /// <summary>Interest Rate</summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rate Rate { get; set; }
    
        /// <summary>User entered information about the existing mortgage  that can not be entered in any defined attributes</summary>
        [Newtonsoft.Json.JsonProperty("refiAdditionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string RefiAdditionalInformation { get; set; }
    
        /// <summary>Yes or No flag to indicate a blended amortization in a refinance application.</summary>
        [Newtonsoft.Json.JsonProperty("refiBlendedAmortization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string RefiBlendedAmortization { get; set; }
    
        /// <summary>Indicates the type of repayment used when calculating the payment.
        /// Menu Code: REPAYMENTTYPE</summary>
        [Newtonsoft.Json.JsonProperty("repaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageExistingTypeRepaymentTypeDd RepaymentTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MortgageType 
    {
        /// <summary>The period of time over which the interest rate, payment and other mortgage conditions are set. At the end of the term the mortgage is due and payable unless renewed. (Months)
        /// Requested</summary>
        [Newtonsoft.Json.JsonProperty("actualPaymentTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
        public double ActualPaymentTerm { get; set; }
    
        /// <summary>The contractual period over which the mortgage amortization is calculated. (Months)
        /// Requested </summary>
        [Newtonsoft.Json.JsonProperty("amortizationTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
        public double AmortizationTerm { get; set; }
    
        /// <summary>New Morgtage: - Balance of the mortgage remaining at the end of the mortgage term, based on calculated amortization schedule
        /// Existing Mortages: - Current outstanding balance
        /// Requested </summary>
        [Newtonsoft.Json.JsonProperty("balanceRemaining", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(double.MinValue, 10000000000000D)]
        public double BalanceRemaining { get; set; }
    
        [Newtonsoft.Json.JsonProperty("borrowerIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BorrowerIds> BorrowerIds { get; set; }
    
        /// <summary>The cash back amount in dollars.</summary>
        [Newtonsoft.Json.JsonProperty("cashBackAmt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double CashBackAmt { get; set; }
    
        /// <summary>Yes/No flag indicatingif the Cash back Amount or the Cash back Percent was calculated.
        /// If ‘Y’ the Cash Back Percent was calculated (cash back percent = cash back amount/ total loan amount*100).
        /// If 'N' the Cash Back Amount was calculated (cash back amount = total loan amount * cash back percent/100).
        /// 
        /// Y=Yes, N=No</summary>
        [Newtonsoft.Json.JsonProperty("cashBackOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeCashBackOverride CashBackOverride { get; set; }
    
        /// <summary>The cash back percentage. </summary>
        [Newtonsoft.Json.JsonProperty("cashBackPercentage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double CashBackPercentage { get; set; }
    
        /// <summary>Mortgage Classification</summary>
        [Newtonsoft.Json.JsonProperty("commercialFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeCommercialFlag CommercialFlag { get; set; }
    
        /// <summary>Mortgage Classification</summary>
        [Newtonsoft.Json.JsonProperty("constructionFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeConstructionFlag ConstructionFlag { get; set; }
    
        /// <summary>Lender’s account number of existing mortgage if refinance deal.</summary>
        [Newtonsoft.Json.JsonProperty("currentMortgageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string CurrentMortgageNumber { get; set; }
    
        /// <summary>Y=Yes, N=No</summary>
        [Newtonsoft.Json.JsonProperty("existingMortgageFlag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeExistingMortgageFlag ExistingMortgageFlag { get; set; }
    
        /// <summary>Name of existing mortgage holder.
        /// Other </summary>
        [Newtonsoft.Json.JsonProperty("existingMortgageHolder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ExistingMortgageHolder { get; set; }
    
        /// <summary>Mortgage Classification</summary>
        [Newtonsoft.Json.JsonProperty("helocFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeHelocFlag HelocFlag { get; set; }
    
        /// <summary>Flag indicating that mortgage default insurance is required.
        /// Y=Yes, N=No
        /// Requested</summary>
        [Newtonsoft.Json.JsonProperty("insuredFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeInsuredFlag InsuredFlag { get; set; }
    
        /// <summary>Interest Adjustment Date (I.A.D.) - The date the term of the mortgage starts. An interest-only payment on mortgage funds advanced prior to the IAD will be due on this date. </summary>
        [Newtonsoft.Json.JsonProperty("interestAdjustmentDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset InterestAdjustmentDate { get; set; }
    
        /// <summary>Interest compounding method used to calculate payment.
        /// Menu Code: INTERESTCOMPOUND
        /// Requested </summary>
        [Newtonsoft.Json.JsonProperty("interestCompoundDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeInterestCompoundDd InterestCompoundDd { get; set; }
    
        /// <summary>Y = Interest Only
        /// N = Principal And Interest</summary>
        [Newtonsoft.Json.JsonProperty("interestOnlyFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeInterestOnlyFlag InterestOnlyFlag { get; set; }
    
        /// <summary>Indicates the type of interest used on this mortgage, ie. fixed, adjustable, variable.
        /// Menu Code: INTERESTTYPE
        /// Requested </summary>
        [Newtonsoft.Json.JsonProperty("interestTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeInterestTypeDd InterestTypeDd { get; set; }
    
        /// <summary>Code that represents the line of business the application was sourced from. ie. A,B,C. 
        /// Menu Code: LINEOFBUSINESS
        /// Requested</summary>
        [Newtonsoft.Json.JsonProperty("lineOfBusinessDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeLineOfBusinessDd LineOfBusinessDd { get; set; }
    
        /// <summary>Indicates the type of loan, ie, Mortgage,LOC,MCM.
        /// Menu Code: LOANTYPE</summary>
        [Newtonsoft.Json.JsonProperty("loanTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeLoanTypeDd LoanTypeDd { get; set; }
    
        /// <summary>Repayment type for Mortgage Insurance Line of Credit.
        /// Menu Code: LOCREPAYMENTTYPE</summary>
        [Newtonsoft.Json.JsonProperty("locRepaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeLocRepaymentTypeDd LocRepaymentTypeDd { get; set; }
    
        /// <summary>The MI policy number (Certificate) assigned by the Mortgage Insurer for this mortgage. Exiting Mortgages only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("miReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string MiReferenceNumber { get; set; }
    
        /// <summary>Mortgage Insurance Provider ,(existing mortgages only).
        /// Menu Code: MORTGAGEINSURER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mortgageInsurerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeMortgageInsurerId MortgageInsurerId { get; set; }
    
        /// <summary>Indicates lien position/charge type.
        /// Menu Code: MORTGAGETYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mortgageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeDd MortgageTypeDd { get; set; }
    
        /// <summary>Yes/No flag indicating if the MI Premium is to be financed (capitalized) or paid upfront at closing. 
        /// Y=Yes, N=No
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mtgInsIncludeFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeMtgInsIncludeFlag MtgInsIncludeFlag { get; set; }
    
        /// <summary>Requested loan amount or base loan amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netLoanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double NetLoanAmount { get; set; }
    
        /// <summary>Original mortgage amount if the mortgage is refinance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalMortgageAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double OriginalMortgageAmount { get; set; }
    
        /// <summary>Indicates frequency when payments are to be made.
        /// Menu Code: PAYMENTFREQUENCY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentFrequencyDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypePaymentFrequencyDd PaymentFrequencyDd { get; set; }
    
        /// <summary>Describes the type of term of the morgage, ie. closed/open.
        /// Menu Code: TERMTYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTermDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypePaymentTermDd PaymentTermDd { get; set; }
    
        /// <summary>If morgtage is to be paid off, indicates when and how.
        /// Menu Code: MORTGAGEPAYOFFTYPE</summary>
        [Newtonsoft.Json.JsonProperty("payoffTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypePayoffTypeDd PayoffTypeDd { get; set; }
    
        /// <summary>Data used to qualify applicants.</summary>
        [Newtonsoft.Json.JsonProperty("qualifyDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifyDetail QualifyDetail { get; set; }
    
        /// <summary>Interest rate used to qualify the applicants.</summary>
        [Newtonsoft.Json.JsonProperty("qualifyRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
        public double QualifyRate { get; set; }
    
        /// <summary>Interest Rate</summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rate2 Rate { get; set; }
    
        /// <summary>The length of time the rate will be guaranteed to the applicant.</summary>
        [Newtonsoft.Json.JsonProperty("rateGuaranteeLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
        public double RateGuaranteeLength { get; set; }
    
        /// <summary>User entered information about the existing mortgage  that can not be entered in any defined attributes</summary>
        [Newtonsoft.Json.JsonProperty("refiAdditionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string RefiAdditionalInformation { get; set; }
    
        /// <summary>Yes or No flag to indicate a blended amortization in a refinance application.</summary>
        [Newtonsoft.Json.JsonProperty("refiBlendedAmortization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeRefiBlendedAmortization RefiBlendedAmortization { get; set; }
    
        /// <summary>Indicates the type of repayment used when calculating the payment.
        /// Menu Code: REPAYMENTTYPE</summary>
        [Newtonsoft.Json.JsonProperty("repaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeRepaymentTypeDd RepaymentTypeDd { get; set; }
    
        /// <summary>Interest Rate entered  by user on existing mortgages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedRate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
        public double RequestedRate { get; set; }
    
        /// <summary>Mortgage Classification</summary>
        [Newtonsoft.Json.JsonProperty("reverseFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeReverseFlag ReverseFlag { get; set; }
    
        /// <summary>Identifies whether the mortgage advance is single or progressive advancements.
        /// Menu Code: SINGLEPROGRESSIVETYPE
        /// 0 - No - Single advance
        /// 1 - Yes - Progressive advances</summary>
        [Newtonsoft.Json.JsonProperty("singleProgressiveTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeSingleProgressiveTypeDd SingleProgressiveTypeDd { get; set; }
    
        /// <summary>Mortgage Classification</summary>
        [Newtonsoft.Json.JsonProperty("subprimeFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MortgageTypeSubprimeFlag SubprimeFlag { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PropertyType 
    {
        /// <summary>The actual appraised value of the property as recorded from a valid appraisal source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double ActualAppraisalValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address1Type Address { get; set; }
    
        /// <summary>The date the appraisal was actually executed.</summary>
        [Newtonsoft.Json.JsonProperty("appraisalDateAct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AppraisalDateAct { get; set; }
    
        /// <summary>Describes the style of the dwelling:(1 story, 2 story)
        /// Menu Code: DWELLINGSTYLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dwellingStyleDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeDwellingStyleDd DwellingStyleDd { get; set; }
    
        /// <summary>Refers to the structural characteristics and/or dwelling configuration, that is, whether the dwelling is a single-detached house, an apartment in a high-rise building, a row house, a mobile home, etc.
        /// Menu Code: DWELLINGTYPE
        /// 2</summary>
        [Newtonsoft.Json.JsonProperty("dwellingTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeDwellingTypeDd DwellingTypeDd { get; set; }
    
        /// <summary>Amount estimated as the appraisal value of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double EstimatedAppraisalValue { get; set; }
    
        /// <summary>Indicates that heat is included in the maintenance fees of a condo unit.
        /// Y=Yes, N=No</summary>
        [Newtonsoft.Json.JsonProperty("feesIncludeHeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeFeesIncludeHeat FeesIncludeHeat { get; set; }
    
        /// <summary>Describes number of vehicles garage will hold, ie. 1,2,3.
        /// Menu Code: GARAGESIZE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("garageSizeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeGarageSizeDd GarageSizeDd { get; set; }
    
        /// <summary>Indicates type of gagage, ie. attached or detached.
        /// Menu Code: GARAGETYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("garageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeGarageTypeDd GarageTypeDd { get; set; }
    
        /// <summary>Describes the type of heating system in the dwelling.
        /// Menu Code: HEATTYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("heatTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeHeatTypeDd HeatTypeDd { get; set; }
    
        /// <summary>Identifies if the Heat/Taxes/Condo fees for other properties are to be included in TDS.
        /// Y=Yes. N=No</summary>
        [Newtonsoft.Json.JsonProperty("includetds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeIncludetds Includetds { get; set; }
    
        /// <summary>Indicates if Urea-formaldehyde foam insulation (UFFI) was used as insulation in the structure.
        /// Y=Yes. N=No
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insulatedWithUffi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeInsulatedWithUffi InsulatedWithUffi { get; set; }
    
        /// <summary>Legal description of the property (free form entered by user). 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string LegalLine1 { get; set; }
    
        /// <summary>Legal description of the property (free form entered by user).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string LegalLine2 { get; set; }
    
        /// <summary>Legal description of the property (free form entered by user).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string LegalLine3 { get; set; }
    
        /// <summary>Living space/area of the structure, quantified by the value in the Living Space Unit of Measure element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("livingSpace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000D)]
        public double LivingSpace { get; set; }
    
        /// <summary>Menu Code: LIVINGSPACEUNITOFMEASURE</summary>
        [Newtonsoft.Json.JsonProperty("livingSpaceUnitOfMeasurDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeLivingSpaceUnitOfMeasurDd LivingSpaceUnitOfMeasurDd { get; set; }
    
        /// <summary>Total lot size/area quantified by the value in the Lot Size Unit of Measure element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lotSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double LotSize { get; set; }
    
        /// <summary>Menu Code: LOTSIZEUNITOFMEASURE</summary>
        [Newtonsoft.Json.JsonProperty("lotSizeUnitOfMeasureDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeLotSizeUnitOfMeasureDd LotSizeUnitOfMeasureDd { get; set; }
    
        /// <summary>Indicates if the property was listed on MLS.
        /// Menu Code: MLSLISTINGFLAG</summary>
        [Newtonsoft.Json.JsonProperty("mlsListingFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeMlsListingFlag MlsListingFlag { get; set; }
    
        /// <summary>Describes the stage that the structure is in, ie. existing, new, or underconstruction.
        /// Menu Code: NEWCONSTRUCTION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newConstructionDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeNewConstructionDd NewConstructionDd { get; set; }
    
        /// <summary>Number of separate units in the structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double NumberOfUnits { get; set; }
    
        /// <summary>Describes how the property will be occupied.
        /// Menu Code: OCCUPANCYTYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupancyTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeOccupancyTypeDd OccupancyTypeDd { get; set; }
    
        /// <summary>The original purchase price for the property.</summary>
        [Newtonsoft.Json.JsonProperty("originalPurchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double OriginalPurchasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("propertyExpense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyExpense> PropertyExpense { get; set; }
    
        /// <summary>Describes tenure of property.
        /// Menu Code: PROPERTYTYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeDd PropertyTypeDd { get; set; }
    
        /// <summary>Indicates which valuation method was selected/used to set value of property and was  used in all calculations.
        /// E=Estimated, A=Appraised, P= Purchase Price</summary>
        [Newtonsoft.Json.JsonProperty("propertyValueIndexId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypePropertyValueIndexId PropertyValueIndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("purchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double PurchasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("realtorInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string RealtorInfo { get; set; }
    
        /// <summary>Original purchase date of the property being refinanced.</summary>
        [Newtonsoft.Json.JsonProperty("refiOrigPurchaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RefiOrigPurchaseDate { get; set; }
    
        /// <summary>Rental Income details</summary>
        [Newtonsoft.Json.JsonProperty("rentalIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RentalIncomeType RentalIncome { get; set; }
    
        /// <summary>Percent stored in rental Income node.
        /// Menu Code: RENTALOFFSETOPTION</summary>
        [Newtonsoft.Json.JsonProperty("rentalOffsetOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeRentalOffsetOption RentalOffsetOption { get; set; }
    
        /// <summary>Yes/No flag indicating if an appraisal is being requested.
        /// Menu Code: REQUESTAPPRAISAL</summary>
        [Newtonsoft.Json.JsonProperty("requestAppraisalDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeRequestAppraisalDd RequestAppraisalDd { get; set; }
    
        /// <summary>Indicates the type of sewer system in place.
        /// Menu Code: SEWAGETYPE</summary>
        [Newtonsoft.Json.JsonProperty("sewageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeSewageTypeDd SewageTypeDd { get; set; }
    
        /// <summary>Age in years of structure.</summary>
        [Newtonsoft.Json.JsonProperty("structureAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
        public double StructureAge { get; set; }
    
        /// <summary>Year that the property tax amount.</summary>
        [Newtonsoft.Json.JsonProperty("taxationYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2019D, 2199D)]
        public double TaxationYear { get; set; }
    
        /// <summary>Describes the source of water for the property.
        /// Menu Code: WATERTYPE</summary>
        [Newtonsoft.Json.JsonProperty("waterTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyTypeWaterTypeDd WaterTypeDd { get; set; }
    
        /// <summary>Year property was built.</summary>
        [Newtonsoft.Json.JsonProperty("yearBuilt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1000D, 10000D)]
        public double YearBuilt { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PropertyOtherType 
    {
        /// <summary>The actual appraised value of the property as recorded from a valid appraisal source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double ActualAppraisalValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address1Type Address { get; set; }
    
        /// <summary>Amount estimated as the appraisal value of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double EstimatedAppraisalValue { get; set; }
    
        /// <summary>Indicates that heat is included in the maintenance fees of a condo unit.
        /// Y=Yes, N=No</summary>
        [Newtonsoft.Json.JsonProperty("feesIncludeHeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyOtherTypeFeesIncludeHeat FeesIncludeHeat { get; set; }
    
        /// <summary>Identifies if the Heat/Taxes/Condo fees for other properties are to be included in TDS.
        /// Y=Yes. N=No</summary>
        [Newtonsoft.Json.JsonProperty("includetds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyOtherTypeIncludetds Includetds { get; set; }
    
        /// <summary>Describes how the property will be occupied.
        /// Menu Code: OCCUPANCYTYPE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupancyTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyOtherTypeOccupancyTypeDd OccupancyTypeDd { get; set; }
    
        /// <summary>The original purchase price for the property.</summary>
        [Newtonsoft.Json.JsonProperty("originalPurchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double OriginalPurchasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("propertyExpense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyExpense2> PropertyExpense { get; set; }
    
        [Newtonsoft.Json.JsonProperty("purchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double PurchasePrice { get; set; }
    
        /// <summary>Original purchase date of the property being refinanced.</summary>
        [Newtonsoft.Json.JsonProperty("refiOrigPurchaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RefiOrigPurchaseDate { get; set; }
    
        /// <summary>Rental Income details</summary>
        [Newtonsoft.Json.JsonProperty("rentalIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RentalIncomeType RentalIncome { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class QualifiedAddressType 
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address1Type Address { get; set; }
    
        /// <summary>Describe address type.
        /// Menu Code: BORROWERADDRESSTYPE</summary>
        [Newtonsoft.Json.JsonProperty("addressTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QualifiedAddressTypeAddressTypeDd AddressTypeDd { get; set; }
    
    
    }
    
    /// <summary>User Profile</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserProfileType 
    {
    
    }
    
    /// <summary>JSON Schema generated by XMLSpy v2019 rel. 3 sp1 (http://www.altova.com)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Root 
    {
        [Newtonsoft.Json.JsonProperty("mortgageApplication", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MortgageApplication MortgageApplication { get; set; }
    
    
    }
    
    /// <summary>Applicants are grouped in related pairs, by maritial status (married or common law).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ApplicantGroup 
    {
        [Newtonsoft.Json.JsonProperty("applicant", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<ApplicantType> Applicant { get; set; } = new System.Collections.ObjectModel.Collection<ApplicantType>();
    
        /// <summary>Describes the type of the applicant pair in this group.
        /// Menu Code: BORROWERGROUPTYPE</summary>
        [Newtonsoft.Json.JsonProperty("applicantGroupTypeDd", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantGroupTypeDd ApplicantGroupTypeDd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mailingAddr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address1Type MailingAddr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mailingAddressIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicantGroupMailingAddressIndicator MailingAddressIndicator { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Address1TypeCountryTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Canada")]
        Canada = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"United States")]
        United_States = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Address1TypeProvinceDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alabama")]
        Alabama = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alaska")]
        Alaska = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alberta")]
        Alberta = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"American Samoa")]
        American_Samoa = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arizona")]
        Arizona = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arkansas")]
        Arkansas = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Armed Forces Americas except Canada")]
        Armed_Forces_Americas_except_Canada = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Armed Forces Europe Africa The Middle East and Canada")]
        Armed_Forces_Europe_Africa_The_Middle_East_and_Canada = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Armed Forces Pacific")]
        Armed_Forces_Pacific = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"British Columbia")]
        British_Columbia = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"California")]
        California = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Colorado")]
        Colorado = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Connecticut")]
        Connecticut = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delaware")]
        Delaware = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"District of Columbia")]
        District_of_Columbia = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Federated States of Micronesia")]
        Federated_States_of_Micronesia = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Florida")]
        Florida = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Georgia")]
        Georgia = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Guam")]
        Guam = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hawaii")]
        Hawaii = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idaho")]
        Idaho = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Illinois")]
        Illinois = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Indiana")]
        Indiana = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Iowa")]
        Iowa = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kansas")]
        Kansas = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kentucky")]
        Kentucky = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Louisiana")]
        Louisiana = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maine")]
        Maine = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manitoba")]
        Manitoba = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Marshall Islands")]
        Marshall_Islands = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maryland")]
        Maryland = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Massachusetts")]
        Massachusetts = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Michigan")]
        Michigan = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minnesota")]
        Minnesota = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mississippi")]
        Mississippi = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Missouri")]
        Missouri = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Montana")]
        Montana = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nebraska")]
        Nebraska = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nevada")]
        Nevada = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New Brunswick")]
        New_Brunswick = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New Hampshire")]
        New_Hampshire = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New Jersey")]
        New_Jersey = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New Mexico")]
        New_Mexico = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New York")]
        New_York = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Newfoundland and Labrador")]
        Newfoundland_and_Labrador = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"North Carolina")]
        North_Carolina = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"North Dakota")]
        North_Dakota = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Northern Mariana Islands")]
        Northern_Mariana_Islands = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Northwest Territories")]
        Northwest_Territories = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nova Scotia")]
        Nova_Scotia = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Nunavut")]
        Nunavut = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ohio")]
        Ohio = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Oklahoma")]
        Oklahoma = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ontario")]
        Ontario = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Oregon")]
        Oregon = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Palau")]
        Palau = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pennsylvania")]
        Pennsylvania = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prince Edward Island")]
        Prince_Edward_Island = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Puerto Rico")]
        Puerto_Rico = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quebec")]
        Quebec = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rhode Island")]
        Rhode_Island = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Saskatchewan")]
        Saskatchewan = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"South Carolina")]
        South_Carolina = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"South Dakota")]
        South_Dakota = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tennessee")]
        Tennessee = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Texas")]
        Texas = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Utah")]
        Utah = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vermont")]
        Vermont = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virgin islands")]
        Virgin_islands = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Virginia")]
        Virginia = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Washington")]
        Washington = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"West Virginia")]
        West_Virginia = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wisconsin")]
        Wisconsin = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wyoming")]
        Wyoming = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yukon")]
        Yukon = 74,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Address1TypeStreetDirectionDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NW")]
        NW = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SW")]
        SW = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"W")]
        W = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Address1TypeStreetTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Abbey")]
        Abbey = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Acres")]
        Acres = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alley")]
        Alley = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Allee")]
        Allee = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Annex")]
        Annex = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arcade")]
        Arcade = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Autoroute")]
        Autoroute = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Avenue")]
        Avenue = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bay")]
        Bay = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bayou")]
        Bayou = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Beach")]
        Beach = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bend")]
        Bend = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bluff")]
        Bluff = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bluffs")]
        Bluffs = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bottom")]
        Bottom = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Boulevard")]
        Boulevard = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Branch")]
        Branch = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bridge")]
        Bridge = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Brook")]
        Brook = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Brooks")]
        Brooks = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Burg")]
        Burg = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Burgs")]
        Burgs = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ByPass")]
        ByPass = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bypass")]
        Bypass = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Byway")]
        Byway = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Camp")]
        Camp = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Campus")]
        Campus = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Canyon")]
        Canyon = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cape")]
        Cape = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Carrefour")]
        Carrefour = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Carre")]
        Carre = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Causeway")]
        Causeway = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Center")]
        Center = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Centers")]
        Centers = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Centre")]
        Centre = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cercle")]
        Cercle = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chase")]
        Chase = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chemin")]
        Chemin = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Circle")]
        Circle = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Circles")]
        Circles = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Circuit")]
        Circuit = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cliff")]
        Cliff = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cliffs")]
        Cliffs = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Close")]
        Close = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Club")]
        Club = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common")]
        Common = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Commons")]
        Commons = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Concession")]
        Concession = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Corner")]
        Corner = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Corners")]
        Corners = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cour")]
        Cour = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cours")]
        Cours = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Course")]
        Course = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Court")]
        Court = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Courts")]
        Courts = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cove")]
        Cove = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Coves")]
        Coves = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Creek")]
        Creek = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Crescent")]
        Crescent = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Crest")]
        Crest = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Croissant")]
        Croissant = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Crossing")]
        Crossing = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Crossroad")]
        Crossroad = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Crossroads")]
        Crossroads = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Culdesac")]
        Culdesac = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Curve")]
        Curve = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cote")]
        Cote = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dale")]
        Dale = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dam")]
        Dam = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dell")]
        Dell = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Diversion")]
        Diversion = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Divide")]
        Divide = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Downs")]
        Downs = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drive")]
        Drive = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Drives")]
        Drives = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"End")]
        End = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Esplanade")]
        Esplanade = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Estate")]
        Estate = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Estates")]
        Estates = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Expressway")]
        Expressway = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Extension")]
        Extension = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Extensions")]
        Extensions = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fall")]
        Fall = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Falls")]
        Falls = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Farm")]
        Farm = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ferry")]
        Ferry = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Field")]
        Field = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fields")]
        Fields = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flat")]
        Flat = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flats")]
        Flats = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ford")]
        Ford = 90,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fords")]
        Fords = 91,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Forest")]
        Forest = 92,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Forge")]
        Forge = 93,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Forges")]
        Forges = 94,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fork")]
        Fork = 95,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Forks")]
        Forks = 96,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fort")]
        Fort = 97,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Freeway")]
        Freeway = 98,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Front")]
        Front = 99,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Garden")]
        Garden = 100,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gardens")]
        Gardens = 101,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gate")]
        Gate = 102,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gateway")]
        Gateway = 103,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Glade")]
        Glade = 104,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Glen")]
        Glen = 105,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Glens")]
        Glens = 106,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Green")]
        Green = 107,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Greens")]
        Greens = 108,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grounds")]
        Grounds = 109,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grove")]
        Grove = 110,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Groves")]
        Groves = 111,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Harbor")]
        Harbor = 112,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Harbors")]
        Harbors = 113,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Harbour")]
        Harbour = 114,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Haven")]
        Haven = 115,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Heath")]
        Heath = 116,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Heights")]
        Heights = 117,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Highlands")]
        Highlands = 118,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Highway")]
        Highway = 119,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hill")]
        Hill = 120,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hills")]
        Hills = 121,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hollow")]
        Hollow = 122,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Impasse")]
        Impasse = 123,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inlet")]
        Inlet = 124,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Island")]
        Island = 125,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Islands")]
        Islands = 126,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Isle")]
        Isle = 127,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Junction")]
        Junction = 128,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Junctions")]
        Junctions = 129,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Key")]
        Key = 130,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Keys")]
        Keys = 131,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Knoll")]
        Knoll = 132,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Knolls")]
        Knolls = 133,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lake")]
        Lake = 134,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lakes")]
        Lakes = 135,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Land")]
        Land = 136,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Landing")]
        Landing = 137,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lane")]
        Lane = 138,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Light")]
        Light = 139,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lights")]
        Lights = 140,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Limits")]
        Limits = 141,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Line")]
        Line = 142,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Link")]
        Link = 143,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Loaf")]
        Loaf = 144,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lock")]
        Lock = 145,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Locks")]
        Locks = 146,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lodge")]
        Lodge = 147,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookout")]
        Lookout = 148,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Loop")]
        Loop = 149,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mall")]
        Mall = 150,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manor")]
        Manor = 151,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manors")]
        Manors = 152,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maze")]
        Maze = 153,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Meadow")]
        Meadow = 154,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Meadows")]
        Meadows = 155,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mews")]
        Mews = 156,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mill")]
        Mill = 157,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mills")]
        Mills = 158,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mission")]
        Mission = 159,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Montee")]
        Montee = 160,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moor")]
        Moor = 161,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Motorway")]
        Motorway = 162,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mount")]
        Mount = 163,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mountain")]
        Mountain = 164,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mountains")]
        Mountains = 165,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Neck")]
        Neck = 166,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Orchard")]
        Orchard = 167,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parade")]
        Parade = 168,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parc")]
        Parc = 169,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Park")]
        Park = 170,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parks")]
        Parks = 171,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parkway")]
        Parkway = 172,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parkways")]
        Parkways = 173,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pass")]
        Pass = 174,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Passage")]
        Passage = 175,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Path")]
        Path = 176,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pathway")]
        Pathway = 177,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pike")]
        Pike = 178,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pine")]
        Pine = 179,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pines")]
        Pines = 180,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Place")]
        Place = 181,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plain")]
        Plain = 182,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plains")]
        Plains = 183,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plateau")]
        Plateau = 184,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Plaza")]
        Plaza = 185,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Point")]
        Point = 186,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pointe")]
        Pointe = 187,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Points")]
        Points = 188,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Port")]
        Port = 189,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ports")]
        Ports = 190,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prairie")]
        Prairie = 191,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 192,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Promenade")]
        Promenade = 193,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quai")]
        Quai = 194,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quay")]
        Quay = 195,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Radial")]
        Radial = 196,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ramp")]
        Ramp = 197,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ranch")]
        Ranch = 198,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rang")]
        Rang = 199,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Range")]
        Range = 200,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rapid")]
        Rapid = 201,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rapids")]
        Rapids = 202,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 203,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ridge")]
        Ridge = 204,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ridges")]
        Ridges = 205,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rise")]
        Rise = 206,
    
        [System.Runtime.Serialization.EnumMember(Value = @"River")]
        River = 207,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Road")]
        Road = 208,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Roads")]
        Roads = 209,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rond point")]
        Rond_point = 210,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Route")]
        Route = 211,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Row")]
        Row = 212,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rue")]
        Rue = 213,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ruelle")]
        Ruelle = 214,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Run")]
        Run = 215,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sentier")]
        Sentier = 216,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shoal")]
        Shoal = 217,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shoals")]
        Shoals = 218,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shore")]
        Shore = 219,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shores")]
        Shores = 220,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Skyway")]
        Skyway = 221,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spring")]
        Spring = 222,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Springs")]
        Springs = 223,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spur")]
        Spur = 224,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spurs")]
        Spurs = 225,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square")]
        Square = 226,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Squares")]
        Squares = 227,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Station")]
        Station = 228,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stravenue")]
        Stravenue = 229,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stream")]
        Stream = 230,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Street")]
        Street = 231,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Streets")]
        Streets = 232,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Subdivision")]
        Subdivision = 233,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Summit")]
        Summit = 234,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terrace")]
        Terrace = 235,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terrasse")]
        Terrasse = 236,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Thicket")]
        Thicket = 237,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Throughway")]
        Throughway = 238,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Towers")]
        Towers = 239,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Townline")]
        Townline = 240,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trace")]
        Trace = 241,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Track")]
        Track = 242,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trafficway")]
        Trafficway = 243,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trail")]
        Trail = 244,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trailer")]
        Trailer = 245,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tunnel")]
        Tunnel = 246,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Turnabout")]
        Turnabout = 247,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Turnpike")]
        Turnpike = 248,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Underpass")]
        Underpass = 249,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Union")]
        Union = 250,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unions")]
        Unions = 251,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vale")]
        Vale = 252,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Valley")]
        Valley = 253,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Valleys")]
        Valleys = 254,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Via")]
        Via = 255,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Viaduct")]
        Viaduct = 256,
    
        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 257,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Views")]
        Views = 258,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Village")]
        Village = 259,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Villages")]
        Villages = 260,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Villas")]
        Villas = 261,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ville")]
        Ville = 262,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vista")]
        Vista = 263,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Voie")]
        Voie = 264,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Walk")]
        Walk = 265,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Walks")]
        Walks = 266,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wall")]
        Wall = 267,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Way")]
        Way = 268,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ways")]
        Ways = 269,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Well")]
        Well = 270,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wells")]
        Wells = 271,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wharf")]
        Wharf = 272,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wood")]
        Wood = 273,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wynd")]
        Wynd = 274,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Echangeur")]
        Echangeur = 275,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ile")]
        Ile = 276,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantAddressTypeAddressTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Current")]
        Current = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Previous")]
        Previous = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mailing")]
        Mailing = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantAddressTypeResidentialStatusDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Live With Parents")]
        Live_With_Parents = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Own")]
        Own = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rent")]
        Rent = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypeCurrentAddressSameAs
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypeExistingClient
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypeFirstTimeBuyer
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    /// <summary>Information used to verify the identity of the person.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Identification 
    {
        /// <summary>Country of identification.</summary>
        [Newtonsoft.Json.JsonProperty("identificationCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string IdentificationCountry { get; set; }
    
        /// <summary>Identification number/code of the indentification type.</summary>
        [Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string IdentificationNumber { get; set; }
    
        /// <summary>Source of identification  (driver license, passport).
        /// Menu Code: IDENTIFICATIONTYPE</summary>
        [Newtonsoft.Json.JsonProperty("identificationTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentificationTypeDd IdentificationTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypeLanguagePreferenceDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"English")]
        English = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"French")]
        French = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypeMaritalStatusDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Common Law")]
        Common_Law = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Divorced")]
        Divorced = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Married")]
        Married = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Separated")]
        Separated = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Widowed")]
        Widowed = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Name 
    {
        /// <summary>First name of applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FirstName { get; set; }
    
        /// <summary>Last name of applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string LastName { get; set; }
    
        /// <summary>Middle initial of applicant.</summary>
        [Newtonsoft.Json.JsonProperty("middleInitial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string MiddleInitial { get; set; }
    
        /// <summary>Menu Code: SALUTATION
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salutationDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameSalutationDd SalutationDd { get; set; }
    
        /// <summary>Suffix follows a person’s full name and provides additional information about the person. Post-nominal letters indicate that the individual holds a position, educational degree, accreditation, office or honour. The most common social name suffixes are senior and junior.
        /// Menu Code: SUFFIX</summary>
        [Newtonsoft.Json.JsonProperty("suffixDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameSuffixDd SuffixDd { get; set; }
    
    
    }
    
    /// <summary>List of other properties and mortgages owned by applicant.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OtherProperty 
    {
        [Newtonsoft.Json.JsonProperty("mortgage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MortgageExistingType> Mortgage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyOtherType Property { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypePreferredContactMethodDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Cell Phone")]
        Cell_Phone = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Home Phone")]
        Home_Phone = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mail")]
        Mail = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Work Phone")]
        Work_Phone = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypePrimaryApplicantFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantTypeRelationshipToPrimaryApplicant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Child")]
        Child = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Common Law")]
        Common_Law = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grandchild")]
        Grandchild = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grandparent")]
        Grandparent = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Parent")]
        Parent = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Related Family Member")]
        Related_Family_Member = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sibling")]
        Sibling = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Spouse")]
        Spouse = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AssetTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Deposit on Purchase")]
        Deposit_on_Purchase = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gift")]
        Gift = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Household Goods")]
        Household_Goods = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Life Insurance")]
        Life_Insurance = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rental Property")]
        Rental_Property = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RRSP")]
        RRSP = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Savings")]
        Savings = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stocks Bonds Mutual")]
        Stocks_Bonds_Mutual = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vehicle")]
        Vehicle = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ContactName 
    {
        /// <summary>First Name of contact.</summary>
        [Newtonsoft.Json.JsonProperty("contactFirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactFirstName { get; set; }
    
        /// <summary>Last Name of contact.</summary>
        [Newtonsoft.Json.JsonProperty("contactLastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ContactLastName { get; set; }
    
        /// <summary>First Name of contact.</summary>
        [Newtonsoft.Json.JsonProperty("contactMiddleInitial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string ContactMiddleInitial { get; set; }
    
        /// <summary>Menu Code: SALUTATION</summary>
        [Newtonsoft.Json.JsonProperty("salutationDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContactNameSalutationDd SalutationDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ContactTypeLanguagePreferenceDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"English")]
        English = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"French")]
        French = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ContactTypePreferredContactMethodDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Cell Phone")]
        Cell_Phone = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Home Phone")]
        Home_Phone = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mail")]
        Mail = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Work Phone")]
        Work_Phone = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DealNotesTypeCategoryDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Admin")]
        Admin = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Follow Up")]
        Follow_Up = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Conversion")]
        Conversion = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DealTypeDealPurposeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Purchase")]
        Purchase = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Purchase with Improvements")]
        Purchase_with_Improvements = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Refinance")]
        Refinance = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ETO")]
        ETO = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Switch or Transfer")]
        Switch_or_Transfer = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Port")]
        Port = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Deficiency Sale")]
        Deficiency_Sale = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Workout")]
        Workout = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DealTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Approval")]
        Approval = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PreApproval")]
        PreApproval = 1,
    
    }
    
    /// <summary>Down Payment Details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DownPaymentSource 
    {
        /// <summary>The amount of the down payment.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double Amount { get; set; }
    
        /// <summary>Text description of the institution or source where the funds are coming from or held.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Description { get; set; }
    
        /// <summary>Identifies the type of down payment.
        /// Menu Code: DOWNPAYMENTSOURCETYPE</summary>
        [Newtonsoft.Json.JsonProperty("downPaymentSourceTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DownPaymentSourceTypeDd DownPaymentSourceTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DealTypeRefiImprovementsFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DealTypeTaxPayorDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Borrower")]
        Borrower = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lender")]
        Lender = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DealTypeThirdPartyApplicationFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EmploymentHistoryTypeEmploymentHistoryStatusDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Current")]
        Current = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Previous")]
        Previous = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EmploymentHistoryTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Full Time")]
        Full_Time = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Part Time")]
        Part_Time = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seasonal")]
        Seasonal = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EmploymentHistoryTypeIndustrySectorDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Banking Finance")]
        Banking_Finance = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Construction")]
        Construction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Education")]
        Education = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Farming Natural Resources")]
        Farming_Natural_Resources = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Government")]
        Government = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Health")]
        Health = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"High Tech")]
        High_Tech = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Leisure Entertainment")]
        Leisure_Entertainment = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manufacturing")]
        Manufacturing = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Retail Sales")]
        Retail_Sales = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Services")]
        Services = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Transportation")]
        Transportation = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Varies")]
        Varies = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EmploymentHistoryTypeOccupationDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Clerical")]
        Clerical = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Labour Tradesperson")]
        Labour_Tradesperson = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Management")]
        Management = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Professional")]
        Professional = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Self Employed")]
        Self_Employed = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EmploymentIncomeTypeIncomePeriodDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Annual")]
        Annual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BiWeekly")]
        BiWeekly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Annual")]
        Semi_Annual = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Monthly")]
        Semi_Monthly = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EmploymentIncomeTypeIncomeTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Commissions")]
        Commissions = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hourly")]
        Hourly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hourly and Commissions")]
        Hourly_and_Commissions = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Income")]
        Interest_Income = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other Employment Income")]
        Other_Employment_Income = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Salary")]
        Salary = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Self Employed")]
        Self_Employed = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum OtherIncomeTypeIncomePeriodDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Annual")]
        Annual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BiWeekly")]
        BiWeekly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Annual")]
        Semi_Annual = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Monthly")]
        Semi_Monthly = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum OtherIncomeTypeIncomeTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alimony")]
        Alimony = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Child Support")]
        Child_Support = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Income")]
        Interest_Income = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other Employment Income")]
        Other_Employment_Income = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pension")]
        Pension = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RentalIncomeTypeIncomePeriodDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Annual")]
        Annual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BiWeekly")]
        BiWeekly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Annual")]
        Semi_Annual = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Monthly")]
        Semi_Monthly = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RentalIncomeTypeIncomeTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Rental Income")]
        Rental_Income = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiabilityTypeLiabilityPayOffTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Prior to Advance")]
        Prior_to_Advance = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"From Proceeds")]
        From_Proceeds = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiabilityTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alimony")]
        Alimony = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Auto Lease")]
        Auto_Lease = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Auto Loan")]
        Auto_Loan = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Child Support")]
        Child_Support = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Credit Card")]
        Credit_Card = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Income Tax")]
        Income_Tax = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lease")]
        Lease = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Personal Loan")]
        Personal_Loan = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Secured Line of Credit")]
        Secured_Line_of_Credit = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Student Loan")]
        Student_Loan = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unsecured Line of Credit")]
        Unsecured_Line_of_Credit = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wage Garnishment")]
        Wage_Garnishment = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mortgage on a Rental Property")]
        Mortgage_on_a_Rental_Property = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mortgage")]
        Mortgage = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rent")]
        Rent = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeExistingMortgageFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeInsuredFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeInterestOnlyFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeInterestTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Adjustable")]
        Adjustable = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Buydown")]
        Buydown = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Capped Variable")]
        Capped_Variable = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeLoanTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Mortgage")]
        Mortgage = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multiple Component")]
        Multiple_Component = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Secured LOC")]
        Secured_LOC = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeMortgageInsurerId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Canada Guaranty")]
        Canada_Guaranty = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMHC")]
        CMHC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Genworth")]
        Genworth = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeMortgageTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Third")]
        Third = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeMtgInsIncludeFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypePaymentFrequencyDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Accelerated Biweekly")]
        Accelerated_Biweekly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Accelerated Weekly")]
        Accelerated_Weekly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Biweekly")]
        Biweekly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Monthly")]
        Semi_Monthly = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypePaymentTermDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Convertible")]
        Convertible = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypePayoffTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"From Proceeds")]
        From_Proceeds = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prior to Advance")]
        Prior_to_Advance = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Rate 
    {
        /// <summary>Interest rate applicable to mortgage. Supplied by the Mortgage Product selected if available or entered manually.</summary>
        [Newtonsoft.Json.JsonProperty("interestRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
        public double InterestRate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageExistingTypeRepaymentTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"At Maturity")]
        At_Maturity = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Blended PI")]
        Blended_PI = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Only Fixed")]
        Interest_Only_Fixed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Only Variable")]
        Interest_Only_Variable = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Plus Fixed Principal")]
        Interest_Plus_Fixed_Principal = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BorrowerIds 
    {
        [Newtonsoft.Json.JsonProperty("borrowerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000000000000D)]
        public double BorrowerId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeCashBackOverride
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeCommercialFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeConstructionFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeExistingMortgageFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeHelocFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeInsuredFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeInterestCompoundDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Annually")]
        Semi_Annually = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeInterestOnlyFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeInterestTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Adjustable")]
        Adjustable = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Buydown")]
        Buydown = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Capped Variable")]
        Capped_Variable = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeLineOfBusinessDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeLoanTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Mortgage")]
        Mortgage = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multiple Component")]
        Multiple_Component = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Secured LOC")]
        Secured_LOC = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeLocRepaymentTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"10 and 15")]
        _10_and_15 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5 and 20")]
        _5_and_20 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeMortgageInsurerId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Canada Guaranty")]
        Canada_Guaranty = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CMHC")]
        CMHC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Genworth")]
        Genworth = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Third")]
        Third = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeMtgInsIncludeFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypePaymentFrequencyDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Accelerated Biweekly")]
        Accelerated_Biweekly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Accelerated Weekly")]
        Accelerated_Weekly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Biweekly")]
        Biweekly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Monthly")]
        Semi_Monthly = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypePaymentTermDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Convertible")]
        Convertible = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypePayoffTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"From Proceeds")]
        From_Proceeds = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prior to Advance")]
        Prior_to_Advance = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class QualifyDetail 
    {
        /// <summary>The contractual period over which the mortgage amortization is calculated. </summary>
        [Newtonsoft.Json.JsonProperty("amortizationTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000D)]
        public double AmortizationTerm { get; set; }
    
        /// <summary>Interest compounding method used to calculate payment.
        /// Menu Code: INTERESTCOMPOUND
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestCompoundDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QualifyDetailInterestCompoundDd InterestCompoundDd { get; set; }
    
        /// <summary>Y = Interest Only
        /// N = Principal And Interest</summary>
        [Newtonsoft.Json.JsonProperty("interestOnlyFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QualifyDetailInterestOnlyFlag InterestOnlyFlag { get; set; }
    
        /// <summary>Indicates the type of repayment used when calculating the payment.
        /// Menu Code: REPAYMENTTYPE</summary>
        [Newtonsoft.Json.JsonProperty("repaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QualifyDetailRepaymentTypeDd RepaymentTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Rate2 
    {
        /// <summary>Percentage (basis points) subtracted from interest rate.
        ///  </summary>
        [Newtonsoft.Json.JsonProperty("buyDownRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
        public double BuyDownRate { get; set; }
    
        /// <summary>Discount percentage subtracted from Interest rate.</summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
        public double Discount { get; set; }
    
        /// <summary>Premium percentage added to the Interest rate.</summary>
        [Newtonsoft.Json.JsonProperty("premium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
        public double Premium { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeRefiBlendedAmortization
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeRepaymentTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"At Maturity")]
        At_Maturity = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Blended PI")]
        Blended_PI = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Only Fixed")]
        Interest_Only_Fixed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Only Variable")]
        Interest_Only_Variable = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Plus Fixed Principal")]
        Interest_Plus_Fixed_Principal = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeReverseFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeSingleProgressiveTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MortgageTypeSubprimeFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeDwellingStyleDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BiLevel")]
        BiLevel = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"One Storey")]
        One_Storey = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Split Level")]
        Split_Level = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Storey and a Half")]
        Storey_and_a_Half = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Three Storey")]
        Three_Storey = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Two Storey")]
        Two_Storey = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeDwellingTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Apartment High Rise")]
        Apartment_High_Rise = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Apartment Low Rise")]
        Apartment_Low_Rise = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Detached")]
        Detached = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Duplex Detached")]
        Duplex_Detached = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Duplex Semi Detached")]
        Duplex_Semi_Detached = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Four Plex Detached")]
        Four_Plex_Detached = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Four Plex Semi Detached")]
        Four_Plex_Semi_Detached = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mobile")]
        Mobile = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Modular Home Detached")]
        Modular_Home_Detached = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Modular Home Semi Detached")]
        Modular_Home_Semi_Detached = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Row Housing")]
        Row_Housing = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Detached")]
        Semi_Detached = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stacked")]
        Stacked = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tri Plex Detached")]
        Tri_Plex_Detached = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tri Plex Semi Detached")]
        Tri_Plex_Semi_Detached = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeFeesIncludeHeat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeGarageSizeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Double")]
        Double = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Triple")]
        Triple = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeGarageTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Attached")]
        Attached = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Detached")]
        Detached = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeHeatTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Electric Baseboard")]
        Electric_Baseboard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Forced Air Gas Oil Electric")]
        Forced_Air_Gas_Oil_Electric = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hot Water Heating")]
        Hot_Water_Heating = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeIncludetds
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeInsulatedWithUffi
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeLivingSpaceUnitOfMeasurDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sq Ft")]
        Sq_Ft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sq M")]
        Sq_M = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeLotSizeUnitOfMeasureDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Acres")]
        Acres = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hectares")]
        Hectares = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sq Ft")]
        Sq_Ft = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sq M")]
        Sq_M = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeMlsListingFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeNewConstructionDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Existing")]
        Existing = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeOccupancyTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Owner Occupied and Rental")]
        Owner_Occupied_and_Rental = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Owner Occupied")]
        Owner_Occupied = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rental")]
        Rental = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Second Home")]
        Second_Home = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PropertyExpense 
    {
        /// <summary>Amount of expense.</summary>
        [Newtonsoft.Json.JsonProperty("propertyExpenseAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double PropertyExpenseAmount { get; set; }
    
        /// <summary>Indicates the period/frequency of the property expense amount.
        /// Menu Code: PROPERTYEXPENSEPERIOD</summary>
        [Newtonsoft.Json.JsonProperty("propertyExpensePeriodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyExpensePeriodDd PropertyExpensePeriodDd { get; set; }
    
        /// <summary>Type of property expense.
        /// Menu Code: PROPERTYEXPENSETYPE</summary>
        [Newtonsoft.Json.JsonProperty("propertyExpenseTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyExpenseTypeDd PropertyExpenseTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Condo")]
        Condo = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FreeHold")]
        FreeHold = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LeaseHold")]
        LeaseHold = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypePropertyValueIndexId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeRentalOffsetOption
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Add Percentage to Gross Income")]
        Add_Percentage_to_Gross_Income = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reduce Rental exp add bal to Gross Inc")]
        Reduce_Rental_exp_add_bal_to_Gross_Inc = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeRequestAppraisalDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeSewageTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Holding Tank")]
        Holding_Tank = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Municipal")]
        Municipal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Septic")]
        Septic = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyTypeWaterTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Municipal")]
        Municipal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Well")]
        Well = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyOtherTypeFeesIncludeHeat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyOtherTypeIncludetds
    {
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyOtherTypeOccupancyTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Owner Occupied and Rental")]
        Owner_Occupied_and_Rental = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Owner Occupied")]
        Owner_Occupied = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rental")]
        Rental = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Second Home")]
        Second_Home = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PropertyExpense2 
    {
        /// <summary>Amount of expense.</summary>
        [Newtonsoft.Json.JsonProperty("propertyExpenseAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
        public double PropertyExpenseAmount { get; set; }
    
        /// <summary>Indicates the period/frequency of the property expense amount.
        /// Menu Code: PROPERTYEXPENSEPERIOD</summary>
        [Newtonsoft.Json.JsonProperty("propertyExpensePeriodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyExpense2PropertyExpensePeriodDd PropertyExpensePeriodDd { get; set; }
    
        /// <summary>Type of property expense.
        /// Menu Code: PROPERTYEXPENSETYPE</summary>
        [Newtonsoft.Json.JsonProperty("propertyExpenseTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyExpense2PropertyExpenseTypeDd PropertyExpenseTypeDd { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum QualifiedAddressTypeAddressTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Current")]
        Current = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Previous")]
        Previous = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mailing")]
        Mailing = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantGroupTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Applicant")]
        Applicant = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Co Signer")]
        Co_Signer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Guarantor")]
        Guarantor = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ApplicantGroupMailingAddressIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IdentificationTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ABM card or Client Card")]
        ABM_card_or_Client_Card = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alberta Registries")]
        Alberta_Registries = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Birth Certificate")]
        Birth_Certificate = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Certificate of Naturalization")]
        Certificate_of_Naturalization = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Citizenship Certificate")]
        Citizenship_Certificate = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Client Card from the CNIB")]
        Client_Card_from_the_CNIB = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Credit Card")]
        Credit_Card = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dept of Community Govt and Trans")]
        Dept_of_Community_Govt_and_Trans = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dept of Govt Services and Lands NL")]
        Dept_of_Govt_Services_and_Lands_NL = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dept of Service of NS and Municipal Relations")]
        Dept_of_Service_of_NS_and_Municipal_Relations = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dept of Trans and Public Works PEI")]
        Dept_of_Trans_and_Public_Works_PEI = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Driver License")]
        Driver_License = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Employee ID Card")]
        Employee_ID_Card = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Government of the NT Dept of Trans")]
        Government_of_the_NT_Dept_of_Trans = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Green Card")]
        Green_Card = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Health Insurance Card")]
        Health_Insurance_Card = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMM 1000 Immigration Form")]
        IMM_1000_Immigration_Form = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMM 1442 Citizenship and Immigration Canada")]
        IMM_1442_Citizenship_and_Immigration_Canada = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Insurance Corporation of BC")]
        Insurance_Corporation_of_BC = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Old Age Security Card")]
        Old_Age_Security_Card = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Passport")]
        Passport = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Permanent Resident Card or IMM5292")]
        Permanent_Resident_Card_or_IMM5292 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Saskatchewan Government Insurance")]
        Saskatchewan_Government_Insurance = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Service New Brunswick")]
        Service_New_Brunswick = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Social Insurance Card")]
        Social_Insurance_Card = 25,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NameSalutationDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Dr")]
        Dr = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Judge")]
        Judge = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Miss")]
        Miss = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mr")]
        Mr = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mrs")]
        Mrs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ms")]
        Ms = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rev")]
        Rev = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NameSuffixDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sr")]
        Sr = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jr")]
        Jr = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ContactNameSalutationDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Dr")]
        Dr = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Judge")]
        Judge = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Miss")]
        Miss = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mr")]
        Mr = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mrs")]
        Mrs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ms")]
        Ms = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rev")]
        Rev = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DownPaymentSourceTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Borrowed Against Liquid Assets")]
        Borrowed_Against_Liquid_Assets = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Existing Equity")]
        Existing_Equity = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gift")]
        Gift = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Grants")]
        Grants = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Personal Cash")]
        Personal_Cash = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RRSP")]
        RRSP = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sale of Existing Property")]
        Sale_of_Existing_Property = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Secondary Financing")]
        Secondary_Financing = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sweat Equity")]
        Sweat_Equity = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum QualifyDetailInterestCompoundDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Semi Annually")]
        Semi_Annually = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum QualifyDetailInterestOnlyFlag
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum QualifyDetailRepaymentTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"At Maturity")]
        At_Maturity = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Blended PI")]
        Blended_PI = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Only Fixed")]
        Interest_Only_Fixed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Only Variable")]
        Interest_Only_Variable = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Plus Fixed Principal")]
        Interest_Plus_Fixed_Principal = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyExpensePeriodDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Annual")]
        Annual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyExpenseTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Condo Fees")]
        Condo_Fees = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"General Expenses")]
        General_Expenses = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Heating Expense")]
        Heating_Expense = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hydro")]
        Hydro = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Insurance")]
        Insurance = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Charges")]
        Interest_Charges = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Management Expenses")]
        Management_Expenses = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Municipal Taxes")]
        Municipal_Taxes = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Repairs")]
        Repairs = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyExpense2PropertyExpensePeriodDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Annual")]
        Annual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PropertyExpense2PropertyExpenseTypeDd
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Condo Fees")]
        Condo_Fees = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"General Expenses")]
        General_Expenses = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Heating Expense")]
        Heating_Expense = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hydro")]
        Hydro = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Insurance")]
        Insurance = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Interest Charges")]
        Interest_Charges = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Management Expenses")]
        Management_Expenses = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Municipal Taxes")]
        Municipal_Taxes = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Repairs")]
        Repairs = 8,
    
    }
}
