


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace Blockcerts.Interactors.Realtor.Commands.ProcessMortgageCommand.Models
{




	//----------------------
	// <auto-generated>
	//     Generated using the NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0) (http://NJsonSchema.org)
	// </auto-generated>
	//----------------------

#pragma warning disable // Disable all warnings

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MortgageApplication
	{
		[Newtonsoft.Json.JsonProperty("applicantGroup", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public System.Collections.Generic.ICollection<ApplicantGroup> ApplicantGroup { get; set; } = new System.Collections.ObjectModel.Collection<ApplicantGroup>();

		/// <summary>Details about this application.</summary>
		[Newtonsoft.Json.JsonProperty("deal", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public DealType Deal { get; set; } = new DealType();

		[Newtonsoft.Json.JsonProperty("mortgage", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public System.Collections.Generic.ICollection<MortgageType> Mortgage { get; set; } = new System.Collections.ObjectModel.Collection<MortgageType>();

		[Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<DealNotesType> Notes { get; set; }

		[Newtonsoft.Json.JsonProperty("subjectProperty", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public PropertyType SubjectProperty { get; set; } = new PropertyType();


	}

	/// <summary>Full street address components</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Address1Type
	{
		/// <summary>Concatentation of street address</summary>
		[Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string AddressLine1 { get; set; }

		/// <summary>Address Line continued</summary>
		[Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string AddressLine2 { get; set; }

		[Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string City { get; set; }

		/// <summary>Menu Code: COUNTRYTYPE</summary>
		[Newtonsoft.Json.JsonProperty("countryTypeDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "CountryTypeDd")]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "CountryTypeDd", canBeEmptyOrNull: true)]
		public string CountryTypeDd { get; set; }

		/// <summary>Including US Zip Code</summary>
		[Newtonsoft.Json.JsonProperty("internationalPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string InternationalPostalCode { get; set; }

		/// <summary>FSA - The First Segment of the Postal Code.</summary>
		[Newtonsoft.Json.JsonProperty("postalFsa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]$")]
		public string PostalFsa { get; set; }

		/// <summary>LDU - The Second Segment of the Postal Code.</summary>
		[Newtonsoft.Json.JsonProperty("postalLdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^(?!.*[DFIOQU]) ?[0-9][A-Z][0-9]$")]
		public string PostalLdu { get; set; }

		/// <summary>Provinces and States
		/// Menu Code: PROVINCESTATE</summary>
		[Newtonsoft.Json.JsonProperty("provinceDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ProvinceDd", canBeEmptyOrNull: true)]
		public string ProvinceDd { get; set; }

		/// <summary>Street direction of address
		/// Menu Code: STREETDIRECTION</summary>
		[Newtonsoft.Json.JsonProperty("streetDirectionDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "StreetDirectionDd", canBeEmptyOrNull: true)]
		public string StreetDirectionDd { get; set; }

		/// <summary>Identifies the name of the street.</summary>
		[Newtonsoft.Json.JsonProperty("streetName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public string StreetName { get; set; }

		/// <summary>Identifies the number on the </summary>
		[Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public string StreetNumber { get; set; }

		/// <summary>Identifies the type of street. Eg: Avenue, Street, Road, Terrace, etc.
		/// Menu Code: STREETTYPE</summary>
		[Newtonsoft.Json.JsonProperty("streetTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "StreetTypeDd", canBeEmptyOrNull: true)]
		public string StreetTypeDd { get; set; }

		/// <summary>Identifies unit number or alpha identification of unit in complex. Eg.: Unit A, Unit 201, etc.</summary>
		[Newtonsoft.Json.JsonProperty("unitNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public string UnitNumber { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ApplicantAddressType
	{
		[Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Address1Type Address { get; set; }

		/// <summary>Describe address type.
		/// Menu Code: BORROWERADDRESSTYPE</summary>
		[Newtonsoft.Json.JsonProperty("addressTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "AddressTypeDd", canBeEmptyOrNull: true)]
		public string AddressTypeDd { get; set; }

		/// <summary>Number of months at this address.</summary>
		[Newtonsoft.Json.JsonProperty("monthsAtAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 9999D)]
		public double MonthsAtAddress { get; set; }

		/// <summary>if residential status is rent, the amount of rent payment.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("rentPaymentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double RentPaymentAmount { get; set; }

		/// <summary>Applicant's status at this address. (Own/Rent etc)
		/// Menu Code: RESIDENTIALSTATUS</summary>
		[Newtonsoft.Json.JsonProperty("residentialStatusDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ResidentialStatusDd", canBeEmptyOrNull: true)]
		public string ResidentialStatusDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ApplicantType
	{
		[Newtonsoft.Json.JsonProperty("addressDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ApplicantAddressType> AddressDetail { get; set; }

		[Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<AssetType> Asset { get; set; }

		/// <summary>Date of birth of applicant.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$")]
		public string BirthDate { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerCellNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(14)]
		public string BorrowerCellNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerFaxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(14)]
		public string BorrowerFaxNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerHomePhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(14)]
		public string BorrowerHomePhoneNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double BorrowerId { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerSpouseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 1000000000000D)]
		public double BorrowerSpouseId { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerWorkPhoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(6)]
		public string BorrowerWorkPhoneExtension { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerWorkPhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(14)]
		public string BorrowerWorkPhoneNumber { get; set; }

		/// <summary>Institution-defined reference number, typically from a corporate Central Information system or other client system of record indicating the number assigned to the client relationship.</summary>
		[Newtonsoft.Json.JsonProperty("clientReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string ClientReferenceNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("currentAddressSameAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "CurrentAddressSameAs", canBeEmptyOrNull: true)]
		public string CurrentAddressSameAs { get; set; }

		/// <summary>Email address to contact applicant.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^(.+)@(.+)$")]
		public string EmailAddress { get; set; }

		[Newtonsoft.Json.JsonProperty("employmentHistory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<EmploymentHistoryType> EmploymentHistory { get; set; }

		/// <summary>Indicates whether applicant is a existing client.
		/// Y=Yes, N=No</summary>
		[Newtonsoft.Json.JsonProperty("existingClient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ExistingClient", canBeEmptyOrNull: true)]
		public string ExistingClient { get; set; }

		/// <summary>Indicates whether applicant is a first time buyer.
		/// Y=Yes, N=No
		/// </summary>
		[Newtonsoft.Json.JsonProperty("firstTimeBuyer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "FirstTimeBuyer", canBeEmptyOrNull: true)]
		public string FirstTimeBuyer { get; set; }

		[Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Identification> Identification { get; set; }

		/// <summary>Language preference of applicant.
		/// Menu Code: LANGUAGEPREFERENCE</summary>
		[Newtonsoft.Json.JsonProperty("languagePreferenceDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LanguagePreferenceDd", canBeEmptyOrNull: true)]
		public string LanguagePreferenceDd { get; set; }

		[Newtonsoft.Json.JsonProperty("liability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<LiabilityType> Liability { get; set; }

		/// <summary>Menu Code: MARITALSTATUS
		///  </summary>
		[Newtonsoft.Json.JsonProperty("maritalStatusDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MaritalStatusDd", canBeEmptyOrNull: true)]
		public string MaritalStatusDd { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Name Name { get; set; } = new Name();

		/// <summary>Number of dependents of applicant.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("numberOfDependents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 99D)]
		public double NumberOfDependents { get; set; }

		[Newtonsoft.Json.JsonProperty("otherIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OtherIncomeType> OtherIncome { get; set; }

		[Newtonsoft.Json.JsonProperty("otherProperty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<OtherProperty> OtherProperty { get; set; }

		/// <summary>Preferred  method of contacting applicant.
		/// Menu Code: PREFCONTACTMETHOD
		/// </summary>
		[Newtonsoft.Json.JsonProperty("preferredContactMethodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PreferredContactMethodDd", canBeEmptyOrNull: true)]
		public string PreferredContactMethodDd { get; set; }

		/// <summary>Y=Yes, N=No</summary>
		[Newtonsoft.Json.JsonProperty("primaryApplicantFlag", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PrimaryApplicantFlag", canBeEmptyOrNull: true)]
		public string PrimaryApplicantFlag { get; set; }

		/// <summary>Menu Code: RELATIONSHIP
		/// </summary>
		[Newtonsoft.Json.JsonProperty("relationshipToPrimaryApplicant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RelationshipToPrimaryApplicant", canBeEmptyOrNull: true)]
		public string RelationshipToPrimaryApplicant { get; set; }

		[Newtonsoft.Json.JsonProperty("socialInsuranceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public string SocialInsuranceNumber { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class AssetType
	{
		/// <summary>Description of asset entered by user.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("assetDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string AssetDescription { get; set; }

		/// <summary>Categorization of the asset.
		/// Menu Code: ASSETTYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("assetTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "AssetTypeDd", canBeEmptyOrNull: true)]
		public string AssetTypeDd { get; set; }

		/// <summary>Value of asset entered by user
		/// </summary>
		[Newtonsoft.Json.JsonProperty("assetValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double AssetValue { get; set; }

		[Newtonsoft.Json.JsonProperty("downpaymentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double DownpaymentAmount { get; set; }


	}

	/// <summary>Contact Node</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactType
	{
		[Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Address1Type Address { get; set; } = new Address1Type();

		[Newtonsoft.Json.JsonProperty("contactCellPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(14)]
		public string ContactCellPhone { get; set; }

		/// <summary>Current email address for contact entry.</summary>
		[Newtonsoft.Json.JsonProperty("contactEmailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public string ContactEmailAddress { get; set; }

		[Newtonsoft.Json.JsonProperty("contactFaxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(14)]
		public string ContactFaxNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public ContactName ContactName { get; set; }

		[Newtonsoft.Json.JsonProperty("contactPhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(14)]
		public string ContactPhoneNumber { get; set; }

		[Newtonsoft.Json.JsonProperty("contactPhoneNumberExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(6)]
		public string ContactPhoneNumberExtension { get; set; }

		/// <summary>Language perference of contact.
		/// Menu Code: LANGUAGEPREFERENCE</summary>
		[Newtonsoft.Json.JsonProperty("languagePreferenceDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LanguagePreferenceDd", canBeEmptyOrNull: true)]
		public string LanguagePreferenceDd { get; set; }

		/// <summary>Preferred method of contact.
		/// Menu Code: PREFCONTACTMETHOD</summary>
		[Newtonsoft.Json.JsonProperty("preferredContactMethodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PreferredContactMethodDd", canBeEmptyOrNull: true)]
		public string PreferredContactMethodDd { get; set; }


	}

	/// <summary>Deal Notes</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class DealNotesType
	{
		/// <summary>Category of note.
		/// Menu Code: DEALNOTESCATEGORY</summary>
		[Newtonsoft.Json.JsonProperty("categoryDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "CategoryDd", canBeEmptyOrNull: true)]
		public string CategoryDd { get; set; }

		/// <summary>Date/Time note was added.</summary>
		[Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset EntryDate { get; set; }

		/// <summary>Free form text as entered by user or created by the system.</summary>
		[Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1000000)]
		public string Text { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class DealType
	{
		/// <summary>Purpose of application.
		/// Menu Code: DEALPURPOSE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("dealPurposeDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "DealPurposeDd", canBeEmptyOrNull: true)]
		public string DealPurposeDd { get; set; }

		/// <summary>Identifies type of application. (Approval or Pre-approval)
		/// Menu Code: APPLICATIONTYPE</summary>
		[Newtonsoft.Json.JsonProperty("dealTypeDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "DealTypeDd", canBeEmptyOrNull: true)]
		public string DealTypeDd { get; set; }

		[Newtonsoft.Json.JsonProperty("downPaymentSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<DownPaymentSource> DownPaymentSource { get; set; }

		/// <summary>The business date anticipated for Closing and Funding.</summary>
		[Newtonsoft.Json.JsonProperty("estimatedClosingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset EstimatedClosingDate { get; set; }

		/// <summary>The date the applicant requires financing as supplied by a realtor.</summary>
		[Newtonsoft.Json.JsonProperty("financingWaiverDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset FinancingWaiverDate { get; set; }

		[Newtonsoft.Json.JsonProperty("referralReferenceNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string ReferralReferenceNo { get; set; }

		/// <summary>Amount for property improvement.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("refiImprovementAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double RefiImprovementAmount { get; set; }

		/// <summary>Description of property improvements being made.</summary>
		[Newtonsoft.Json.JsonProperty("refiImprovementsDesc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string RefiImprovementsDesc { get; set; }

		/// <summary>Indicates if improvements being done excluding purchase.
		/// Y=Yes, N= No</summary>
		[Newtonsoft.Json.JsonProperty("refiImprovementsFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RefiImprovementsFlag", canBeEmptyOrNull: true)]
		public string RefiImprovementsFlag { get; set; }

		/// <summary>Purpose for Refinancing</summary>
		[Newtonsoft.Json.JsonProperty("refiPurpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string RefiPurpose { get; set; }

		[Newtonsoft.Json.JsonProperty("sourceApplicationId", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string SourceApplicationId { get; set; }

		/// <summary>Identifies the entity that will be paying the property taxes.
		/// Menu Code: TAXPAYOR</summary>
		[Newtonsoft.Json.JsonProperty("taxPayorDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "TaxPayorDd", canBeEmptyOrNull: true)]
		public string TaxPayorDd { get; set; }

		/// <summary>Third Party is defined as an application that is initiated on behalf of another person other than the applicant(s).
		/// Y=Yes, N= No</summary>
		[Newtonsoft.Json.JsonProperty("thirdPartyApplicationFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ThirdPartyApplicationFlag")]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ThirdPartyApplicationFlag", canBeEmptyOrNull: true)]
		public string ThirdPartyApplicationFlag { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmploymentHistoryType
	{
		/// <summary>User entered description of the type of company that the applicant owes.</summary>
		[Newtonsoft.Json.JsonProperty("companyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string CompanyType { get; set; }

		[Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public ContactType Contact { get; set; } = new ContactType();

		[Newtonsoft.Json.JsonProperty("employerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(40)]
		public string EmployerName { get; set; }

		/// <summary>Indicates current or previous employment.
		/// Menu Code: EMPLOYMENTHISTORYSTATUS</summary>
		[Newtonsoft.Json.JsonProperty("employmentHistoryStatusDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "EmploymentHistoryStatusDd", canBeEmptyOrNull: true)]
		public string EmploymentHistoryStatusDd { get; set; }

		/// <summary>Indicates type of employment, IE. full or part time, seasonal etc.
		/// Menu Code: EMPLOYMENTHISTORYTYPE</summary>
		[Newtonsoft.Json.JsonProperty("employmentHistoryTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "EmploymentHistoryTypeDd", canBeEmptyOrNull: true)]
		public string EmploymentHistoryTypeDd { get; set; }

		/// <summary>Gross revenue reported of the company owned by the applicant and employing the applicant.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("grossRevenue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double GrossRevenue { get; set; }

		[Newtonsoft.Json.JsonProperty("income", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public EmploymentIncomeType Income { get; set; } = new EmploymentIncomeType();

		/// <summary>Distinct subset of industry this applicant is employed in.
		/// Menu Code: INDUSTRYSECTOR
		/// </summary>
		[Newtonsoft.Json.JsonProperty("industrySectorDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IndustrySectorDd", canBeEmptyOrNull: true)]
		public string IndustrySectorDd { get; set; }

		/// <summary>Job title of applicant entered by user.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("jobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public string JobTitle { get; set; }

		/// <summary>Length of service at this employer.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("monthsOfService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 999D)]
		public double MonthsOfService { get; set; }

		/// <summary>Occupation of applicant at this employer.
		/// Menu Code: OCCUPATION
		/// </summary>
		[Newtonsoft.Json.JsonProperty("occupationDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "OccupationDd", canBeEmptyOrNull: true)]
		public string OccupationDd { get; set; }

		/// <summary>Operating name of the company owned and employing the applicant.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("operatingAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string OperatingAs { get; set; }

		[Newtonsoft.Json.JsonProperty("selfEmploymentFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		public string SelfEmploymentFlag { get; set; }

		/// <summary>The number of months an applicant has been employed in a particular industry. (months)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("timeInIndustry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 999D)]
		public double TimeInIndustry { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EmploymentIncomeType
	{
		/// <summary>Amount of income applicant received.
		/// Employment History</summary>
		[Newtonsoft.Json.JsonProperty("incomeAmount", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double IncomeAmount { get; set; }

		/// <summary>Free form text entered by user to indicated the source of the income.</summary>
		[Newtonsoft.Json.JsonProperty("incomeDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string IncomeDescription { get; set; }

		/// <summary>Indicates frequency income received.
		/// Menu Code: INCOMEPERIOD
		/// Employment History </summary>
		[Newtonsoft.Json.JsonProperty("incomePeriodDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IncomePeriodDd", canBeEmptyOrNull: true)]
		public string IncomePeriodDd { get; set; }

		/// <summary>Indicates the type of income .
		/// Menu Code: INCOMETYPE
		/// Employment History </summary>
		[Newtonsoft.Json.JsonProperty("incomeTypeDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IncomeTypeDd", canBeEmptyOrNull: true)]
		public string IncomeTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class OtherIncomeType
	{
		/// <summary>Amount of income applicant received.
		/// Employment History</summary>
		[Newtonsoft.Json.JsonProperty("incomeAmount", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double IncomeAmount { get; set; }

		/// <summary>Free form text entered by user to indicated the source of the income.</summary>
		[Newtonsoft.Json.JsonProperty("incomeDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string IncomeDescription { get; set; }

		/// <summary>Indicates frequency income received.
		/// Menu Code: INCOMEPERIOD
		/// Employment History </summary>
		[Newtonsoft.Json.JsonProperty("incomePeriodDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IncomePeriodDd", canBeEmptyOrNull: true)]
		public string IncomePeriodDd { get; set; }

		/// <summary>Indicates the type of income .
		/// Menu Code: INCOMETYPE
		/// Employment History </summary>
		[Newtonsoft.Json.JsonProperty("incomeTypeDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IncomeTypeDd", canBeEmptyOrNull: true)]
		public string IncomeTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class RentalIncomeType
	{
		/// <summary>The percentage of the income of this entry to be included in the TDS calculation for this applicant. </summary>
		[Newtonsoft.Json.JsonProperty("incPercentInTds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100D)]
		public double IncPercentInTds { get; set; }

		/// <summary>Amount of income applicant received.
		/// Employment History</summary>
		[Newtonsoft.Json.JsonProperty("incomeAmount", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double IncomeAmount { get; set; }

		/// <summary>Free form text entered by user to indicated the source of the income.</summary>
		[Newtonsoft.Json.JsonProperty("incomeDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string IncomeDescription { get; set; }

		/// <summary>Indicates frequency income received.
		/// Menu Code: INCOMEPERIOD
		/// Employment History </summary>
		[Newtonsoft.Json.JsonProperty("incomePeriodDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IncomePeriodDd", canBeEmptyOrNull: true)]
		public string IncomePeriodDd { get; set; }

		/// <summary>Indicates the type of income .
		/// Menu Code: INCOMETYPE
		/// Employment History </summary>
		[Newtonsoft.Json.JsonProperty("incomeTypeDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IncomeTypeDd", canBeEmptyOrNull: true)]
		public string IncomeTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class LiabilityType
	{
		/// <summary>Set to ‘Y’ if this liability was extracted from a credit bureau report, if not then ‘N’.</summary>
		[Newtonsoft.Json.JsonProperty("cbScraped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		public string CbScraped { get; set; }

		/// <summary>Credit limit for a credit card or Line of Credit.
		/// Broker </summary>
		[Newtonsoft.Json.JsonProperty("creditLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double CreditLimit { get; set; }

		/// <summary>Outstanding amount/balance remaining.
		/// Broker </summary>
		[Newtonsoft.Json.JsonProperty("liabilityAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double LiabilityAmount { get; set; }

		/// <summary>Free form description, entered by user, that describes the institution or company that owns the liability.
		/// Broker</summary>
		[Newtonsoft.Json.JsonProperty("liabilityDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string LiabilityDescription { get; set; }

		/// <summary>The amount of the monthly payment.
		/// Broker</summary>
		[Newtonsoft.Json.JsonProperty("liabilityMonthlyPayment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double LiabilityMonthlyPayment { get; set; }

		/// <summary>Indicates how the liability will be eliminated before closing.
		/// Menu Code: LIABILITYPAYOFFTYPE</summary>
		[Newtonsoft.Json.JsonProperty("liabilityPayOffTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LiabilityPayOffTypeDd", canBeEmptyOrNull: true)]
		public string LiabilityPayOffTypeDd { get; set; }

		/// <summary>Describes the type of liability.
		/// Menu Code: LIABILITYTYPE
		/// Broker</summary>
		[Newtonsoft.Json.JsonProperty("liabilityTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LiabilityTypeDd", canBeEmptyOrNull: true)]
		public string LiabilityTypeDd { get; set; }

		/// <summary>Maturity date, if applicable, of the liability.</summary>
		[Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset MaturityDate { get; set; }

		/// <summary>Y/N</summary>
		[Newtonsoft.Json.JsonProperty("monthlyPaymentOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		public string MonthlyPaymentOverride { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MortgageExistingType
	{
		/// <summary>The period of time over which the interest rate, payment and other mortgage conditions are set. At the end of the term the mortgage is due and payable unless renewed. (Months)
		/// Requested</summary>
		[Newtonsoft.Json.JsonProperty("actualPaymentTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
		public double ActualPaymentTerm { get; set; }

		/// <summary>New Morgtage: - Balance of the mortgage remaining at the end of the mortgage term, based on calculated amortization schedule
		/// Existing Mortages: - Current outstanding balance
		/// Requested </summary>
		[Newtonsoft.Json.JsonProperty("balanceRemaining", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(double.MinValue, 10000000000000D)]
		public double BalanceRemaining { get; set; }

		/// <summary>Lender’s account number of existing mortgage if refinance deal.</summary>
		[Newtonsoft.Json.JsonProperty("currentMortgageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(15)]
		public string CurrentMortgageNumber { get; set; }

		/// <summary>Y=Yes, N=No</summary>
		[Newtonsoft.Json.JsonProperty("existingMortgageFlag", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ExistingMortgageFlag", canBeEmptyOrNull: true)]
		public string ExistingMortgageFlag { get; set; }

		/// <summary>Name of existing mortgage holder.
		/// Other </summary>
		[Newtonsoft.Json.JsonProperty("existingMortgageHolder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string ExistingMortgageHolder { get; set; }

		/// <summary>Flag indicating that mortgage default insurance is required.
		/// Y=Yes, N=No
		/// Requested</summary>
		[Newtonsoft.Json.JsonProperty("insuredFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InsuredFlag", canBeEmptyOrNull: true)]
		public string InsuredFlag { get; set; }

		/// <summary>Y = Interest Only
		/// N = Principal And Interest</summary>
		[Newtonsoft.Json.JsonProperty("interestOnlyFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InterestOnlyFlag", canBeEmptyOrNull: true)]
		public string InterestOnlyFlag { get; set; }

		/// <summary>Indicates the type of interest used on this mortgage, ie. fixed, adjustable, variable.
		/// Menu Code: INTERESTTYPE
		/// Requested </summary>
		[Newtonsoft.Json.JsonProperty("interestTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InterestTypeDd", canBeEmptyOrNull: true)]
		public string InterestTypeDd { get; set; }

		/// <summary>Indicates the type of loan, ie, Mortgage,LOC,MCM.
		/// Menu Code: LOANTYPE</summary>
		[Newtonsoft.Json.JsonProperty("loanTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LoanTypeDd", canBeEmptyOrNull: true)]
		public string LoanTypeDd { get; set; }

		/// <summary>The MI policy number (Certificate) assigned by the Mortgage Insurer for this mortgage. Exiting Mortgages only)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("miReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string MiReferenceNumber { get; set; }

		/// <summary>Mortgage Insurance Provider ,(existing mortgages only).
		/// Menu Code: MORTGAGEINSURER
		/// </summary>
		[Newtonsoft.Json.JsonProperty("mortgageInsurerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MortgageInsurerId", canBeEmptyOrNull: true)]
		public string MortgageInsurerId { get; set; }

		/// <summary>Indicates lien position/charge type.
		/// Menu Code: MORTGAGETYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("mortgageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MortgageTypeDd", canBeEmptyOrNull: true)]
		public string MortgageTypeDd { get; set; }

		/// <summary>Yes/No flag indicating if the MI Premium is to be financed (capitalized) or paid upfront at closing. 
		/// Y=Yes, N=No
		/// </summary>
		[Newtonsoft.Json.JsonProperty("mtgInsIncludeFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MtgInsIncludeFlag", canBeEmptyOrNull: true)]
		public string MtgInsIncludeFlag { get; set; }

		/// <summary>Requested loan amount or base loan amount.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("netLoanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double NetLoanAmount { get; set; }

		/// <summary>Original mortgage amount if the mortgage is refinance.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("originalMortgageAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double OriginalMortgageAmount { get; set; }

		/// <summary>Indicates frequency when payments are to be made.
		/// Menu Code: PAYMENTFREQUENCY
		/// </summary>
		[Newtonsoft.Json.JsonProperty("paymentFrequencyDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PaymentFrequencyDd", canBeEmptyOrNull: true)]
		public string PaymentFrequencyDd { get; set; }

		/// <summary>Describes the type of term of the morgage, ie. closed/open.
		/// Menu Code: TERMTYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("paymentTermDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PaymentTermDd", canBeEmptyOrNull: true)]
		public string PaymentTermDd { get; set; }

		/// <summary>If morgtage is to be paid off, indicates when and how.
		/// Menu Code: MORTGAGEPAYOFFTYPE</summary>
		[Newtonsoft.Json.JsonProperty("payoffTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PayoffTypeDd", canBeEmptyOrNull: true)]
		public string PayoffTypeDd { get; set; }

		/// <summary>Interest Rate</summary>
		[Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Rate Rate { get; set; }

		/// <summary>User entered information about the existing mortgage  that can not be entered in any defined attributes</summary>
		[Newtonsoft.Json.JsonProperty("refiAdditionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		public string RefiAdditionalInformation { get; set; }

		/// <summary>Yes or No flag to indicate a blended amortization in a refinance application.</summary>
		[Newtonsoft.Json.JsonProperty("refiBlendedAmortization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RefiBlendedAmortization", canBeEmptyOrNull: true)]
		public string RefiBlendedAmortization { get; set; }

		/// <summary>Indicates the type of repayment used when calculating the payment.
		/// Menu Code: REPAYMENTTYPE</summary>
		[Newtonsoft.Json.JsonProperty("repaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RepaymentTypeDd", canBeEmptyOrNull: true)]
		public string RepaymentTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MortgageType
	{
		/// <summary>The period of time over which the interest rate, payment and other mortgage conditions are set. At the end of the term the mortgage is due and payable unless renewed. (Months)
		/// Requested</summary>
		[Newtonsoft.Json.JsonProperty("actualPaymentTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
		public double ActualPaymentTerm { get; set; }

		/// <summary>The contractual period over which the mortgage amortization is calculated. (Months)
		/// Requested </summary>
		[Newtonsoft.Json.JsonProperty("amortizationTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
		public double AmortizationTerm { get; set; }

		/// <summary>New Morgtage: - Balance of the mortgage remaining at the end of the mortgage term, based on calculated amortization schedule
		/// Existing Mortages: - Current outstanding balance
		/// Requested </summary>
		[Newtonsoft.Json.JsonProperty("balanceRemaining", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(double.MinValue, 10000000000000D)]
		public double BalanceRemaining { get; set; }

		[Newtonsoft.Json.JsonProperty("borrowerIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<BorrowerIds> BorrowerIds { get; set; }

		/// <summary>The cash back amount in dollars.</summary>
		[Newtonsoft.Json.JsonProperty("cashBackAmt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double CashBackAmt { get; set; }

		/// <summary>Yes/No flag indicatingif the Cash back Amount or the Cash back Percent was calculated.
		/// If ‘Y’ the Cash Back Percent was calculated (cash back percent = cash back amount/ total loan amount*100).
		/// If 'N' the Cash Back Amount was calculated (cash back amount = total loan amount * cash back percent/100).
		/// 
		/// Y=Yes, N=No</summary>
		[Newtonsoft.Json.JsonProperty("cashBackOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "CashBackOverride", canBeEmptyOrNull: true)]
		public string CashBackOverride { get; set; }

		/// <summary>The cash back percentage. </summary>
		[Newtonsoft.Json.JsonProperty("cashBackPercentage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100D)]
		public double CashBackPercentage { get; set; }

		/// <summary>Mortgage Classification</summary>
		[Newtonsoft.Json.JsonProperty("commercialFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "CommercialFlag", canBeEmptyOrNull: true)]
		public string CommercialFlag { get; set; }

		/// <summary>Mortgage Classification</summary>
		[Newtonsoft.Json.JsonProperty("constructionFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ConstructionFlag", canBeEmptyOrNull: true)]
		public string ConstructionFlag { get; set; }

		/// <summary>Lender’s account number of existing mortgage if refinance deal.</summary>
		[Newtonsoft.Json.JsonProperty("currentMortgageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(15)]
		public string CurrentMortgageNumber { get; set; }

		/// <summary>Y=Yes, N=No</summary>
		[Newtonsoft.Json.JsonProperty("existingMortgageFlag", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ExistingMortgageFlag", canBeEmptyOrNull: true)]
		public string ExistingMortgageFlag { get; set; }

		/// <summary>Name of existing mortgage holder.
		/// Other </summary>
		[Newtonsoft.Json.JsonProperty("existingMortgageHolder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(80)]
		public string ExistingMortgageHolder { get; set; }

		/// <summary>Mortgage Classification</summary>
		[Newtonsoft.Json.JsonProperty("helocFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "HelocFlag", canBeEmptyOrNull: true)]
		public string HelocFlag { get; set; }

		/// <summary>Flag indicating that mortgage default insurance is required.
		/// Y=Yes, N=No
		/// Requested</summary>
		[Newtonsoft.Json.JsonProperty("insuredFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InsuredFlag", canBeEmptyOrNull: true)]
		public string InsuredFlag { get; set; }

		/// <summary>Interest Adjustment Date (I.A.D.) - The date the term of the mortgage starts. An interest-only payment on mortgage funds advanced prior to the IAD will be due on this date. </summary>
		[Newtonsoft.Json.JsonProperty("interestAdjustmentDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset InterestAdjustmentDate { get; set; }

		/// <summary>Interest compounding method used to calculate payment.
		/// Menu Code: INTERESTCOMPOUND
		/// Requested </summary>
		[Newtonsoft.Json.JsonProperty("interestCompoundDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InterestCompoundDd", canBeEmptyOrNull: true)]
		public string InterestCompoundDd { get; set; }

		/// <summary>Y = Interest Only
		/// N = Principal And Interest</summary>
		[Newtonsoft.Json.JsonProperty("interestOnlyFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InterestOnlyFlag", canBeEmptyOrNull: true)]
		public string InterestOnlyFlag { get; set; }

		/// <summary>Indicates the type of interest used on this mortgage, ie. fixed, adjustable, variable.
		/// Menu Code: INTERESTTYPE
		/// Requested </summary>
		[Newtonsoft.Json.JsonProperty("interestTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InterestTypeDd", canBeEmptyOrNull: true)]
		public string InterestTypeDd { get; set; }

		/// <summary>Code that represents the line of business the application was sourced from. ie. A,B,C. 
		/// Menu Code: LINEOFBUSINESS
		/// Requested</summary>
		[Newtonsoft.Json.JsonProperty("lineOfBusinessDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LineOfBusinessDd", canBeEmptyOrNull: true)]
		public string LineOfBusinessDd { get; set; }

		/// <summary>Indicates the type of loan, ie, Mortgage,LOC,MCM.
		/// Menu Code: LOANTYPE</summary>
		[Newtonsoft.Json.JsonProperty("loanTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LoanTypeDd", canBeEmptyOrNull: true)]
		public string LoanTypeDd { get; set; }

		/// <summary>Repayment type for Mortgage Insurance Line of Credit.
		/// Menu Code: LOCREPAYMENTTYPE</summary>
		[Newtonsoft.Json.JsonProperty("locRepaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LocRepaymentTypeDd", canBeEmptyOrNull: true)]
		public string LocRepaymentTypeDd { get; set; }

		/// <summary>The MI policy number (Certificate) assigned by the Mortgage Insurer for this mortgage. Exiting Mortgages only)
		/// </summary>
		[Newtonsoft.Json.JsonProperty("miReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string MiReferenceNumber { get; set; }

		/// <summary>Mortgage Insurance Provider ,(existing mortgages only).
		/// Menu Code: MORTGAGEINSURER
		/// </summary>
		[Newtonsoft.Json.JsonProperty("mortgageInsurerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MortgageInsurerId", canBeEmptyOrNull: true)]
		public string MortgageInsurerId { get; set; }

		/// <summary>Indicates lien position/charge type.
		/// Menu Code: MORTGAGETYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("mortgageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MortgageTypeDd", canBeEmptyOrNull: true)]
		public string MortgageTypeDd { get; set; }

		/// <summary>Yes/No flag indicating if the MI Premium is to be financed (capitalized) or paid upfront at closing. 
		/// Y=Yes, N=No
		/// </summary>
		[Newtonsoft.Json.JsonProperty("mtgInsIncludeFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MtgInsIncludeFlag", canBeEmptyOrNull: true)]
		public string MtgInsIncludeFlag { get; set; }

		/// <summary>Requested loan amount or base loan amount.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("netLoanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double NetLoanAmount { get; set; }

		/// <summary>Original mortgage amount if the mortgage is refinance.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("originalMortgageAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double OriginalMortgageAmount { get; set; }

		/// <summary>Indicates frequency when payments are to be made.
		/// Menu Code: PAYMENTFREQUENCY
		/// </summary>
		[Newtonsoft.Json.JsonProperty("paymentFrequencyDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PaymentFrequencyDd", canBeEmptyOrNull: true)]
		public string PaymentFrequencyDd { get; set; }

		/// <summary>Describes the type of term of the morgage, ie. closed/open.
		/// Menu Code: TERMTYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("paymentTermDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PaymentTermDd", canBeEmptyOrNull: true)]
		public string PaymentTermDd { get; set; }

		/// <summary>If morgtage is to be paid off, indicates when and how.
		/// Menu Code: MORTGAGEPAYOFFTYPE</summary>
		[Newtonsoft.Json.JsonProperty("payoffTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PayoffTypeDd", canBeEmptyOrNull: true)]
		public string PayoffTypeDd { get; set; }

		/// <summary>Data used to qualify applicants.</summary>
		[Newtonsoft.Json.JsonProperty("qualifyDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public QualifyDetail QualifyDetail { get; set; }

		/// <summary>Interest rate used to qualify the applicants.</summary>
		[Newtonsoft.Json.JsonProperty("qualifyRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
		public double QualifyRate { get; set; }

		/// <summary>Interest Rate</summary>
		[Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Rate2 Rate { get; set; }

		/// <summary>The length of time the rate will be guaranteed to the applicant.</summary>
		[Newtonsoft.Json.JsonProperty("rateGuaranteeLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
		public double RateGuaranteeLength { get; set; }

		/// <summary>User entered information about the existing mortgage  that can not be entered in any defined attributes</summary>
		[Newtonsoft.Json.JsonProperty("refiAdditionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		public string RefiAdditionalInformation { get; set; }

		/// <summary>Yes or No flag to indicate a blended amortization in a refinance application.</summary>
		[Newtonsoft.Json.JsonProperty("refiBlendedAmortization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RefiBlendedAmortization", canBeEmptyOrNull: true)]
		public string RefiBlendedAmortization { get; set; }

		/// <summary>Indicates the type of repayment used when calculating the payment.
		/// Menu Code: REPAYMENTTYPE</summary>
		[Newtonsoft.Json.JsonProperty("repaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RepaymentTypeDd", canBeEmptyOrNull: true)]
		public string RepaymentTypeDd { get; set; }

		/// <summary>Interest Rate entered  by user on existing mortgages.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("requestedRate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
		public double RequestedRate { get; set; }

		/// <summary>Mortgage Classification</summary>
		[Newtonsoft.Json.JsonProperty("reverseFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ReverseFlag", canBeEmptyOrNull: true)]
		public string ReverseFlag { get; set; }

		/// <summary>Identifies whether the mortgage advance is single or progressive advancements.
		/// Menu Code: SINGLEPROGRESSIVETYPE
		/// 0 - No - Single advance
		/// 1 - Yes - Progressive advances</summary>
		[Newtonsoft.Json.JsonProperty("singleProgressiveTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "SingleProgressiveTypeDd", canBeEmptyOrNull: true)]
		public string SingleProgressiveTypeDd { get; set; }

		/// <summary>Mortgage Classification</summary>
		[Newtonsoft.Json.JsonProperty("subprimeFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "SubprimeFlag", canBeEmptyOrNull: true)]
		public string SubprimeFlag { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PropertyType
	{
		/// <summary>The actual appraised value of the property as recorded from a valid appraisal source.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("actualAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double ActualAppraisalValue { get; set; }

		[Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Address1Type Address { get; set; }

		/// <summary>The date the appraisal was actually executed.</summary>
		[Newtonsoft.Json.JsonProperty("appraisalDateAct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset AppraisalDateAct { get; set; }

		/// <summary>Describes the style of the dwelling:(1 story, 2 story)
		/// Menu Code: DWELLINGSTYLE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("dwellingStyleDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "DwellingStyleDd", canBeEmptyOrNull: true)]
		public string DwellingStyleDd { get; set; }

		/// <summary>Refers to the structural characteristics and/or dwelling configuration, that is, whether the dwelling is a single-detached house, an apartment in a high-rise building, a row house, a mobile home, etc.
		/// Menu Code: DWELLINGTYPE
		/// 2</summary>
		[Newtonsoft.Json.JsonProperty("dwellingTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "DwellingTypeDd", canBeEmptyOrNull: true)]
		public string DwellingTypeDd { get; set; }

		/// <summary>Amount estimated as the appraisal value of the property.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("estimatedAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double EstimatedAppraisalValue { get; set; }

		/// <summary>Indicates that heat is included in the maintenance fees of a condo unit.
		/// Y=Yes, N=No</summary>
		[Newtonsoft.Json.JsonProperty("feesIncludeHeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "FeesIncludeHeat", canBeEmptyOrNull: true)]
		public string FeesIncludeHeat { get; set; }

		/// <summary>Describes number of vehicles garage will hold, ie. 1,2,3.
		/// Menu Code: GARAGESIZE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("garageSizeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "GarageSizeDd", canBeEmptyOrNull: true)]
		public string GarageSizeDd { get; set; }

		/// <summary>Indicates type of gagage, ie. attached or detached.
		/// Menu Code: GARAGETYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("garageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "GarageTypeDd", canBeEmptyOrNull: true)]
		public string GarageTypeDd { get; set; }

		/// <summary>Describes the type of heating system in the dwelling.
		/// Menu Code: HEATTYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("heatTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "HeatTypeDd", canBeEmptyOrNull: true)]
		public string HeatTypeDd { get; set; }

		/// <summary>Identifies if the Heat/Taxes/Condo fees for other properties are to be included in TDS.
		/// Y=Yes. N=No</summary>
		[Newtonsoft.Json.JsonProperty("includetds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "Includetds", canBeEmptyOrNull: true)]
		public string Includetds { get; set; }

		/// <summary>Indicates if Urea-formaldehyde foam insulation (UFFI) was used as insulation in the structure.
		/// Y=Yes. N=No
		/// </summary>
		[Newtonsoft.Json.JsonProperty("insulatedWithUffi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(2)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InsulatedWithUffi", canBeEmptyOrNull: true)]
		public string InsulatedWithUffi { get; set; }

		/// <summary>Legal description of the property (free form entered by user). 
		/// </summary>
		[Newtonsoft.Json.JsonProperty("legalLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string LegalLine1 { get; set; }

		/// <summary>Legal description of the property (free form entered by user).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("legalLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string LegalLine2 { get; set; }

		/// <summary>Legal description of the property (free form entered by user).
		/// </summary>
		[Newtonsoft.Json.JsonProperty("legalLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string LegalLine3 { get; set; }

		/// <summary>Living space/area of the structure, quantified by the value in the Living Space Unit of Measure element.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("livingSpace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000D)]
		public double LivingSpace { get; set; }

		/// <summary>Menu Code: LIVINGSPACEUNITOFMEASURE</summary>
		[Newtonsoft.Json.JsonProperty("livingSpaceUnitOfMeasurDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LivingSpaceUnitOfMeasurDd", canBeEmptyOrNull: true)]
		public string LivingSpaceUnitOfMeasurDd { get; set; }

		/// <summary>Total lot size/area quantified by the value in the Lot Size Unit of Measure element.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("lotSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double LotSize { get; set; }

		/// <summary>Menu Code: LOTSIZEUNITOFMEASURE</summary>
		[Newtonsoft.Json.JsonProperty("lotSizeUnitOfMeasureDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "LotSizeUnitOfMeasureDd", canBeEmptyOrNull: true)]
		public string LotSizeUnitOfMeasureDd { get; set; }

		/// <summary>Indicates if the property was listed on MLS.
		/// Menu Code: MLSLISTINGFLAG</summary>
		[Newtonsoft.Json.JsonProperty("mlsListingFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MlsListingFlag", canBeEmptyOrNull: true)]
		public string MlsListingFlag { get; set; }

		/// <summary>Describes the stage that the structure is in, ie. existing, new, or underconstruction.
		/// Menu Code: NEWCONSTRUCTION
		/// </summary>
		[Newtonsoft.Json.JsonProperty("newConstructionDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "NewConstructionDd", canBeEmptyOrNull: true)]
		public string NewConstructionDd { get; set; }

		/// <summary>Number of separate units in the structure.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("numberOfUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100D)]
		public double NumberOfUnits { get; set; }

		/// <summary>Describes how the property will be occupied.
		/// Menu Code: OCCUPANCYTYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("occupancyTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "OccupancyTypeDd", canBeEmptyOrNull: true)]
		public string OccupancyTypeDd { get; set; }

		/// <summary>The original purchase price for the property.</summary>
		[Newtonsoft.Json.JsonProperty("originalPurchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double OriginalPurchasePrice { get; set; }

		[Newtonsoft.Json.JsonProperty("propertyExpense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<PropertyExpense> PropertyExpense { get; set; }

		/// <summary>Describes tenure of property.
		/// Menu Code: PROPERTYTYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("propertyTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PropertyTypeDd", canBeEmptyOrNull: true)]
		public string PropertyTypeDd { get; set; }

		/// <summary>Indicates which valuation method was selected/used to set value of property and was  used in all calculations.
		/// E=Estimated, A=Appraised, P= Purchase Price</summary>
		[Newtonsoft.Json.JsonProperty("propertyValueIndexId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PropertyValueIndexId", canBeEmptyOrNull: true)]
		public string PropertyValueIndexId { get; set; }

		[Newtonsoft.Json.JsonProperty("purchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double PurchasePrice { get; set; }

		[Newtonsoft.Json.JsonProperty("realtorInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(250)]
		public string RealtorInfo { get; set; }

		/// <summary>Original purchase date of the property being refinanced.</summary>
		[Newtonsoft.Json.JsonProperty("refiOrigPurchaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset RefiOrigPurchaseDate { get; set; }

		/// <summary>Rental Income details</summary>
		[Newtonsoft.Json.JsonProperty("rentalIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RentalIncomeType RentalIncome { get; set; }

		/// <summary>Percent stored in rental Income node.
		/// Menu Code: RENTALOFFSETOPTION</summary>
		[Newtonsoft.Json.JsonProperty("rentalOffsetOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RentalOffsetOption", canBeEmptyOrNull: true)]
		public string RentalOffsetOption { get; set; }

		/// <summary>Yes/No flag indicating if an appraisal is being requested.
		/// Menu Code: REQUESTAPPRAISAL</summary>
		[Newtonsoft.Json.JsonProperty("requestAppraisalDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RequestAppraisalDd", canBeEmptyOrNull: true)]
		public string RequestAppraisalDd { get; set; }

		/// <summary>Indicates the type of sewer system in place.
		/// Menu Code: SEWAGETYPE</summary>
		[Newtonsoft.Json.JsonProperty("sewageTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "SewageTypeDd", canBeEmptyOrNull: true)]
		public string SewageTypeDd { get; set; }

		/// <summary>Age in years of structure.</summary>
		[Newtonsoft.Json.JsonProperty("structureAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
		public double StructureAge { get; set; }

		/// <summary>Year that the property tax amount.</summary>
		[Newtonsoft.Json.JsonProperty("taxationYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(2019D, 2199D)]
		public double TaxationYear { get; set; }

		/// <summary>Describes the source of water for the property.
		/// Menu Code: WATERTYPE</summary>
		[Newtonsoft.Json.JsonProperty("waterTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "WaterTypeDd", canBeEmptyOrNull: true)]
		public string WaterTypeDd { get; set; }

		/// <summary>Year property was built.</summary>
		[Newtonsoft.Json.JsonProperty("yearBuilt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(1000D, 10000D)]
		public double YearBuilt { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PropertyOtherType
	{
		/// <summary>The actual appraised value of the property as recorded from a valid appraisal source.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("actualAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double ActualAppraisalValue { get; set; }

		[Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Address1Type Address { get; set; }

		/// <summary>Amount estimated as the appraisal value of the property.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("estimatedAppraisalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double EstimatedAppraisalValue { get; set; }

		/// <summary>Indicates that heat is included in the maintenance fees of a condo unit.
		/// Y=Yes, N=No</summary>
		[Newtonsoft.Json.JsonProperty("feesIncludeHeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "FeesIncludeHeat", canBeEmptyOrNull: true)]
		public string FeesIncludeHeat { get; set; }

		/// <summary>Identifies if the Heat/Taxes/Condo fees for other properties are to be included in TDS.
		/// Y=Yes. N=No</summary>
		[Newtonsoft.Json.JsonProperty("includetds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "Includetds", canBeEmptyOrNull: true)]
		public string Includetds { get; set; }

		/// <summary>Describes how the property will be occupied.
		/// Menu Code: OCCUPANCYTYPE
		/// </summary>
		[Newtonsoft.Json.JsonProperty("occupancyTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "OccupancyTypeDd", canBeEmptyOrNull: true)]
		public string OccupancyTypeDd { get; set; }

		/// <summary>The original purchase price for the property.</summary>
		[Newtonsoft.Json.JsonProperty("originalPurchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double OriginalPurchasePrice { get; set; }

		[Newtonsoft.Json.JsonProperty("propertyExpense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<PropertyExpense2> PropertyExpense { get; set; }

		[Newtonsoft.Json.JsonProperty("purchasePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double PurchasePrice { get; set; }

		/// <summary>Original purchase date of the property being refinanced.</summary>
		[Newtonsoft.Json.JsonProperty("refiOrigPurchaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset RefiOrigPurchaseDate { get; set; }

		/// <summary>Rental Income details</summary>
		[Newtonsoft.Json.JsonProperty("rentalIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public RentalIncomeType RentalIncome { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class QualifiedAddressType
	{
		[Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Address1Type Address { get; set; }

		/// <summary>Describe address type.
		/// Menu Code: BORROWERADDRESSTYPE</summary>
		[Newtonsoft.Json.JsonProperty("addressTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "AddressTypeDd", canBeEmptyOrNull: true)]
		public string AddressTypeDd { get; set; }


	}

	/// <summary>User Profile</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UserProfileType
	{

	}

	/// <summary>JSON Schema generated by XMLSpy v2019 rel. 3 sp1 (http://www.altova.com)</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Root
	{
		[Newtonsoft.Json.JsonProperty("mortgageApplication", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public MortgageApplication MortgageApplication { get; set; }


	}

	/// <summary>Applicants are grouped in related pairs, by maritial status (married or common law).</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ApplicantGroup
	{
		[Newtonsoft.Json.JsonProperty("applicant", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public System.Collections.Generic.ICollection<ApplicantType> Applicant { get; set; } = new System.Collections.ObjectModel.Collection<ApplicantType>();

		/// <summary>Describes the type of the applicant pair in this group.
		/// Menu Code: BORROWERGROUPTYPE</summary>
		[Newtonsoft.Json.JsonProperty("applicantGroupTypeDd", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "ApplicantGroupTypeDd", canBeEmptyOrNull: true)]
		public string ApplicantGroupTypeDd { get; set; }

		[Newtonsoft.Json.JsonProperty("mailingAddr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Address1Type MailingAddr { get; set; }

		[Newtonsoft.Json.JsonProperty("mailingAddressIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "MailingAddressIndicator", canBeEmptyOrNull: true)]
		public string MailingAddressIndicator { get; set; }


	}

	/// <summary>Information used to verify the identity of the person.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Identification
	{
		/// <summary>Country of identification.</summary>
		[Newtonsoft.Json.JsonProperty("identificationCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public string IdentificationCountry { get; set; }

		/// <summary>Identification number/code of the indentification type.</summary>
		[Newtonsoft.Json.JsonProperty("identificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public string IdentificationNumber { get; set; }

		/// <summary>Source of identification  (driver license, passport).
		/// Menu Code: IDENTIFICATIONTYPE</summary>
		[Newtonsoft.Json.JsonProperty("identificationTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "IdentificationTypeDd", canBeEmptyOrNull: true)]
		public string IdentificationTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Name
	{
		/// <summary>First name of applicant.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string FirstName { get; set; }

		/// <summary>Last name of applicant.
		/// </summary>
		[Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.StringLength(40)]
		public string LastName { get; set; }

		/// <summary>Middle initial of applicant.</summary>
		[Newtonsoft.Json.JsonProperty("middleInitial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		public string MiddleInitial { get; set; }

		/// <summary>Menu Code: SALUTATION
		/// </summary>
		[Newtonsoft.Json.JsonProperty("salutationDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "SalutationDd", canBeEmptyOrNull: true)]
		public string SalutationDd { get; set; }

		/// <summary>Suffix follows a person’s full name and provides additional information about the person. Post-nominal letters indicate that the individual holds a position, educational degree, accreditation, office or honour. The most common social name suffixes are senior and junior.
		/// Menu Code: SUFFIX</summary>
		[Newtonsoft.Json.JsonProperty("suffixDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "SuffixDd", canBeEmptyOrNull: true)]
		public string SuffixDd { get; set; }


	}

	/// <summary>List of other properties and mortgages owned by applicant.</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class OtherProperty
	{
		[Newtonsoft.Json.JsonProperty("mortgage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<MortgageExistingType> Mortgage { get; set; }

		[Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public PropertyOtherType Property { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ContactName
	{
		/// <summary>First Name of contact.</summary>
		[Newtonsoft.Json.JsonProperty("contactFirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string ContactFirstName { get; set; }

		/// <summary>Last Name of contact.</summary>
		[Newtonsoft.Json.JsonProperty("contactLastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string ContactLastName { get; set; }

		/// <summary>First Name of contact.</summary>
		[Newtonsoft.Json.JsonProperty("contactMiddleInitial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		public string ContactMiddleInitial { get; set; }

		/// <summary>Menu Code: SALUTATION</summary>
		[Newtonsoft.Json.JsonProperty("salutationDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "SalutationDd", canBeEmptyOrNull: true)]
		public string SalutationDd { get; set; }


	}

	/// <summary>Down Payment Details</summary>
	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class DownPaymentSource
	{
		/// <summary>The amount of the down payment.</summary>
		[Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double Amount { get; set; }

		/// <summary>Text description of the institution or source where the funds are coming from or held.</summary>
		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(35)]
		public string Description { get; set; }

		/// <summary>Identifies the type of down payment.
		/// Menu Code: DOWNPAYMENTSOURCETYPE</summary>
		[Newtonsoft.Json.JsonProperty("downPaymentSourceTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "DownPaymentSourceTypeDd", canBeEmptyOrNull: true)]
		public string DownPaymentSourceTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Rate
	{
		/// <summary>Interest rate applicable to mortgage. Supplied by the Mortgage Product selected if available or entered manually.</summary>
		[Newtonsoft.Json.JsonProperty("interestRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
		public double InterestRate { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class BorrowerIds
	{
		[Newtonsoft.Json.JsonProperty("borrowerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 1000000000000D)]
		public double BorrowerId { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class QualifyDetail
	{
		/// <summary>The contractual period over which the mortgage amortization is calculated. </summary>
		[Newtonsoft.Json.JsonProperty("amortizationTerm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000D)]
		public double AmortizationTerm { get; set; }

		/// <summary>Interest compounding method used to calculate payment.
		/// Menu Code: INTERESTCOMPOUND
		/// </summary>
		[Newtonsoft.Json.JsonProperty("interestCompoundDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InterestCompoundDd", canBeEmptyOrNull: true)]
		public string InterestCompoundDd { get; set; }

		/// <summary>Y = Interest Only
		/// N = Principal And Interest</summary>
		[Newtonsoft.Json.JsonProperty("interestOnlyFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(1)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "InterestOnlyFlag", canBeEmptyOrNull: true)]
		public string InterestOnlyFlag { get; set; }

		/// <summary>Indicates the type of repayment used when calculating the payment.
		/// Menu Code: REPAYMENTTYPE</summary>
		[Newtonsoft.Json.JsonProperty("repaymentTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "RepaymentTypeDd", canBeEmptyOrNull: true)]
		public string RepaymentTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Rate2
	{
		/// <summary>Percentage (basis points) subtracted from interest rate.
		///  </summary>
		[Newtonsoft.Json.JsonProperty("buyDownRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
		public double BuyDownRate { get; set; }

		/// <summary>Discount percentage subtracted from Interest rate.</summary>
		[Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
		public double Discount { get; set; }

		/// <summary>Premium percentage added to the Interest rate.</summary>
		[Newtonsoft.Json.JsonProperty("premium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 99.999D)]
		public double Premium { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PropertyExpense
	{
		/// <summary>Amount of expense.</summary>
		[Newtonsoft.Json.JsonProperty("propertyExpenseAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double PropertyExpenseAmount { get; set; }

		/// <summary>Indicates the period/frequency of the property expense amount.
		/// Menu Code: PROPERTYEXPENSEPERIOD</summary>
		[Newtonsoft.Json.JsonProperty("propertyExpensePeriodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PropertyExpensePeriodDd", canBeEmptyOrNull: true)]
		public string PropertyExpensePeriodDd { get; set; }

		/// <summary>Type of property expense.
		/// Menu Code: PROPERTYEXPENSETYPE</summary>
		[Newtonsoft.Json.JsonProperty("propertyExpenseTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PropertyExpenseTypeDd", canBeEmptyOrNull: true)]
		public string PropertyExpenseTypeDd { get; set; }


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PropertyExpense2
	{
		/// <summary>Amount of expense.</summary>
		[Newtonsoft.Json.JsonProperty("propertyExpenseAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.Range(0D, 100000000000D)]
		public double PropertyExpenseAmount { get; set; }

		/// <summary>Indicates the period/frequency of the property expense amount.
		/// Menu Code: PROPERTYEXPENSEPERIOD</summary>
		[Newtonsoft.Json.JsonProperty("propertyExpensePeriodDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PropertyExpensePeriodDd", canBeEmptyOrNull: true)]
		public string PropertyExpensePeriodDd { get; set; }

		/// <summary>Type of property expense.
		/// Menu Code: PROPERTYEXPENSETYPE</summary>
		[Newtonsoft.Json.JsonProperty("propertyExpenseTypeDd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[Blockcerts.Interactors.Shared.DataAnnotations.DropDownAttribute(ddType: "PropertyExpenseTypeDd", canBeEmptyOrNull: true)]
		public string PropertyExpenseTypeDd { get; set; }

	}
}




